<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Ray&#39;s Blog</title>
    <link>https://leiheng.github.io/tags/java/</link>
    <description>Recent content in java on Ray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Nov 2019 19:59:49 +0800</lastBuildDate>
    
	<atom:link href="https://leiheng.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maven Shade Plugin Merge Jar</title>
      <link>https://leiheng.github.io/posts/java/maven-shade-plugin-merge-jar/</link>
      <pubDate>Thu, 28 Nov 2019 19:59:49 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/maven-shade-plugin-merge-jar/</guid>
      <description>太悲伤了, 接手了一个非常挫里挫气的项目, 改了很多挫里挫气的代码, 最气的是, 这个代码的打包方式是从intellij/eclipse 导出的. 谁敢</description>
    </item>
    
    <item>
      <title>Make Pipe Work in Java</title>
      <link>https://leiheng.github.io/posts/java/make-pipe-work-in-java/</link>
      <pubDate>Wed, 27 Nov 2019 16:09:40 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/make-pipe-work-in-java/</guid>
      <description>坑爹啊, 我写了个用 pipe 的linux command, 用了 Runtime.exec(String cmd), 似乎没有什么作用. 非常的困惑, 明明这个命令能够在linux 上跑的. 我还怀疑是不是最后的返回的问题(</description>
    </item>
    
    <item>
      <title>Play With Play 05</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-05/</link>
      <pubDate>Mon, 11 Nov 2019 14:49:28 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-05/</guid>
      <description>protobuf serialization protobuf 序列化不难, 他有自己默认的序列化和反序列化. 并且是支持驼峰的命名模式的. 但是关键的是, 我们框架的里面用的jackson 的序列化工具. 怎</description>
    </item>
    
    <item>
      <title>StackOverflow Error</title>
      <link>https://leiheng.github.io/posts/java/stackoverflow-error/</link>
      <pubDate>Thu, 12 Sep 2019 11:23:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/stackoverflow-error/</guid>
      <description>我还没想到我居然能够遇到StackOverflow 这种级别的错. 先来复习一下什么叫StackOverflow Error. ERROR - review StackOverflow Error StackOverflow object to json Fix 网上看到这</description>
    </item>
    
    <item>
      <title>Play With Play 02</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</link>
      <pubDate>Mon, 09 Sep 2019 18:14:43 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</guid>
      <description>Get request body 拿到body 并且转换成dto,而且我再吐槽一句, playframwork的官方guid上写的body 转 dto居然是自己写个annota</description>
    </item>
    
    <item>
      <title>Grpc 1</title>
      <link>https://leiheng.github.io/posts/rpc/java/grpc-1/</link>
      <pubDate>Thu, 15 Aug 2019 17:11:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/rpc/java/grpc-1/</guid>
      <description>Step 1 Of course we need clone project from github, now I goto example folder and compile project.
Ooooooooooooooops! It failed even already behind proxy, so I set proxy i gradle.properties at example path. For example:
#http proxy setup #dont need protocol &amp;quot;http&amp;quot; systemProp.http.proxyHost=server systemProp.http.proxyPort=8080 #https proxy setup #dont need protocol &amp;quot;http&amp;quot; systemProp.https.proxyHost=server systemProp.https.proxyPort=8080  Step 2 lets use akka-grpc generate grpc proto 
 ·End·</description>
    </item>
    
    <item>
      <title>Maven Dependencies Pom Type</title>
      <link>https://leiheng.github.io/posts/java/maven-dependencies/</link>
      <pubDate>Tue, 13 Aug 2019 17:16:54 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/maven-dependencies/</guid>
      <description>终于有一天, 我看到我自己 java 练习项目依赖, 配置乱成一坨糟, 心里很糟心, 就打算整理整理整理. 于是创建了 common-dependency-parent, 项目结构如下: . |-- common-dep | `-- pom.xml |-- pom.xml `-- shared-pom `-- pom.xml 其</description>
    </item>
    
    <item>
      <title>Play With Play 01</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</link>
      <pubDate>Thu, 08 Aug 2019 13:16:32 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</guid>
      <description>prepare install gradle install sbt gradle 我尝试去使用 gradle 去构建项目, 但是一时半会还没能理解 gradle 里面 plugins 怎么玩的, 遂放弃, 先把 play 玩起来再说. sbt I&amp;rsquo;m new one for playframwork. My intellij cannot import sbt project so that tried to run sbt</description>
    </item>
    
    <item>
      <title>Jvm Infra</title>
      <link>https://leiheng.github.io/posts/java/jvm/jvm-infra/</link>
      <pubDate>Mon, 05 Aug 2019 18:27:25 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/jvm/jvm-infra/</guid>
      <description>infra java 虚拟机分heap、vm stack(虚拟机栈)、method area、 native method stack(本地方法栈)、program counter register(程序</description>
    </item>
    
    <item>
      <title>Java Writing Specification.md</title>
      <link>https://leiheng.github.io/posts/java/java-tips/</link>
      <pubDate>Thu, 01 Aug 2019 19:25:47 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/java-tips/</guid>
      <description>到 resource 文件夹里面拿文件 String response = Resources.toString(Resources.getResource(&amp;quot;response.json&amp;quot;), Charsets.UTF_8); // bytes: Resources.asByteSource(Resources.getResource(&amp;quot;datain_100000.log&amp;quot;).toURI().toURL()).openBufferedStream(); // Guava: public static URL getResource(String resourceName) { ClassLoader loader = MoreObjects.firstNonNull( Thread.currentThread().getContextClassLoader(), Resources.class.getClassLoader()); URL url = loader.getResource(resourceName); checkArgument(url != null, &amp;quot;resource %s not found.&amp;quot;, resourceName); return url; } get env in SpringBoot // define properties in application.yaml like: project: service: name: smarta-installer feature: mgmt: job-setting: job-retry-time: ${JOB_RETRY_TIME:100} job-interval-time: ${JOB_INTERVAL_TIME:60} then, create</description>
    </item>
    
  </channel>
</rss>