<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray&#39;s Blog on Ray&#39;s Blog</title>
    <link>https://leiheng.github.io/</link>
    <description>Recent content in Ray&#39;s Blog on Ray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Aug 2019 17:16:54 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Maven Dependencies Pom Type</title>
      <link>https://leiheng.github.io/posts/java/maven-dependencies/</link>
      <pubDate>Tue, 13 Aug 2019 17:16:54 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/maven-dependencies/</guid>
      <description>&lt;p&gt;终于有一天, 我看到我自己 java 练习项目依赖, 配置乱成一坨糟, 心里很糟心, 就打算整理整理整理.&lt;/p&gt;

&lt;p&gt;于是创建了 &lt;code&gt;common-dependency-parent&lt;/code&gt;, 项目结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;.
|-- common-dep
|   `-- pom.xml
|-- pom.xml
`-- shared-pom
    `-- pom.xml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中, &lt;code&gt;shared-pom&lt;/code&gt; 将会作为其他project 的 parent project, 并引用 common-dep 来import 常用的 dependencies. 在我install之后, 尝试引用parent 和 common-dep 失败, 并报错:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;dependencies.dependency.version&amp;rsquo; for com.leih:common-dep:jar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找了大半天, 为啥会去找jar, 对着settings 文件找错, &lt;code&gt;offline&lt;/code&gt; 开了又关关了又开, 还是没有找到原因.&lt;/p&gt;

&lt;p&gt;最后, 发现引用 common-dep 的时候忘记加 &lt;code&gt;&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/code&gt; 了. 如果不显示指定依赖,那么 maven 就会自动认为这个是个 jar 包, 并从local, remote 查找.
单独拉出一个project 当作依赖项, 内容只有pom.xml 的时候, 不指定packaging type是pom 的话, 那么mvn install 就会给你生成一个空的jar包.&lt;/p&gt;

&lt;p&gt;所以, 如果很不幸没有指定packaging并且引用的时候也没有指定type,基本上就emmmm.&lt;/p&gt;

&lt;p&gt;share-pom pom.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;artifactId&amp;gt;shared-pom&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    ...
    &amp;lt;dependencyManagement&amp;gt;
      &amp;lt;dependencies&amp;gt;
      ...
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;com.leih&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;common-dep&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
          &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;your project module pom.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.leih&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;common-dep&amp;lt;/artifactId&amp;gt;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;common project in [github]()&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Odds and Ends</title>
      <link>https://leiheng.github.io/posts/k8s/odds-and-ends/</link>
      <pubDate>Tue, 13 Aug 2019 11:30:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/odds-and-ends/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;terminationGracePeriod&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在05-&amp;gt;08中，nginx从deployment-&amp;gt;daemonset,用k8s的upgrade policy并不起作用。upgrade 的动作是applying新接收到的yaml，出现的状况是创建了一个Daemonset出来但是pod并没有更新(&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/#pod-selector&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;),由于已经存在了一个Daemonset controller选择的pod，Daemonset 认为这个pod就是他创建出来的，但是并没有实际控制pod 所以需要先手动kill pod，但是由于old yaml 中定义了terminationGracePeriod=60，nginx pod会有60sec的时间收尾，60sec之后才会真正的完全清理干净(&lt;a href=&#34;https://youtu.be/Z_l_kE1MDTc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方视频&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use kubeadm install k8s(single master)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taint and toleration&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;我在kubeadm init output中看到了&lt;code&gt;[markmaster] Marking the node shc-sma-cd180.hpeswlab.net as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]&lt;/code&gt;，除了podselect和affinity另外一种调度方式。&lt;code&gt;kubectl describe node nodeName&lt;/code&gt;可以看到taint&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change DNS</title>
      <link>https://leiheng.github.io/posts/hugo/change-dns/</link>
      <pubDate>Thu, 08 Aug 2019 13:20:14 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/change-dns/</guid>
      <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Playframwork-01</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-playframworl-01/</link>
      <pubDate>Thu, 08 Aug 2019 13:16:32 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-playframworl-01/</guid>
      <description>

&lt;h2 id=&#34;prepare&#34;&gt;prepare&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;install gradle&lt;/li&gt;
&lt;li&gt;install sbt&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;gradle&#34;&gt;gradle&lt;/h3&gt;

&lt;p&gt;我尝试去使用 gradle 去构建项目, 但是一时半会还没能理解 gradle 里面 plugins 怎么玩的, 遂放弃, 先把 play 玩起来再说.&lt;/p&gt;

&lt;h3 id=&#34;sbt&#34;&gt;sbt&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m new one for playframwork. My intellij cannot import sbt project so that tried to run &lt;code&gt;sbt&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;sbt&lt;/code&gt; at empty folder and get this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Getting org.scala-sbt sbt 1.2.8  (this may take some time)...

:: problems summary ::
:::: WARNINGS
                module not found: org.scala-sbt#sbt;1.2.8

        ==== local: tried

          C:\Users\leih.CORPDOM\.ivy2\local\org.scala-sbt\sbt\1.2.8\ivys\ivy.xml

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          C:\Users\leih.CORPDOM\.ivy2\local\org.scala-sbt\sbt\1.2.8\jars\sbt.jar

        ==== local-preloaded-ivy: tried

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        ==== local-preloaded: tried

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== Maven Central: tried

          https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== sbt-maven-releases: tried

          https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== sbt-maven-snapshots: tried

          https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== typesafe-ivy-releases: tried

          https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        ==== sbt-ivy-snapshots: tried

          https://repo.scala-sbt.org/scalasbt/ivy-snapshots/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

                ::::::::::::::::::::::::::::::::::::::::::::::

                ::          UNRESOLVED DEPENDENCIES         ::

                ::::::::::::::::::::::::::::::::::::::::::::::

                :: org.scala-sbt#sbt;1.2.8: not found

                ::::::::::::::::::::::::::::::::::::::::::::::


:::: ERRORS
        Server access Error: Received fatal alert: access_denied url=https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/ivy-snapshots/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml


:: USE VERBOSE OR DEBUG MESSAGE LEVEL FOR MORE DETAILS
unresolved dependency: org.scala-sbt#sbt;1.2.8: not found
Error during sbt execution: Error retrieving required libraries
  (see C:\Users\leih.CORPDOM\.sbt\boot\update.log for complete log)
Error: Could not retrieve sbt 1.2.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My java version on win10:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;openjdk version &amp;quot;1.8.0_181&amp;quot;
OpenJDK Runtime Environment (Zulu 8.31.0.1-win64) (build 1.8.0_181-b02)
OpenJDK 64-Bit Server VM (Zulu 8.31.0.1-win64) (build 25.181-b02, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer this &lt;a href=&#34;https://stackoverflow.com/questions/43984715/sbt-error-retrieving-required-libraries&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;answer&lt;/a&gt; to add &lt;code&gt;repositories&lt;/code&gt; at &lt;code&gt;.stb&lt;/code&gt; and re-run &lt;code&gt;sbt&lt;/code&gt;, get maven repo success. But failed when I tried to &lt;code&gt;sbt run&lt;/code&gt; run at &lt;code&gt;hello-world&lt;/code&gt; smaple project:&lt;/p&gt;

&lt;p&gt;repositories is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[repositories]
  local
  sbt-releases-repo: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
  sbt-plugins-repo: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
  maven-central: http://repo1.maven.org/maven2/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Added proxy by:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set JAVA_OPTS=-Dhttp.proxyHost=yourserver -Dhttp.proxyPort=8080&lt;/code&gt;
re run &lt;code&gt;sbt&lt;/code&gt; failed.&lt;/p&gt;

&lt;p&gt;Then added &lt;code&gt;.sbtopts&lt;/code&gt;: &lt;code&gt;-Dsbt.repository.secure=false&lt;/code&gt;, but still failed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  ::          UNRESOLVED DEPENDENCIES         ::
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
...
[warn]  typesafe-ivy-releases: unable to get resource for com.typesafe#npm_2.12;1.2.1: res=https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe/npm_2.12/1.2.1/jars/npm_2.12.jar: javax.net.ssl.SSLHandshakeException: Received fatal alert: access_denied
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]
[warn]  Note: Unresolved dependencies path:
[warn]          org.scala-lang.modules:scala-parser-combinators_2.12:1.1.1
[warn]            +- com.typesafe.sbt:sbt-native-packager:1.3.20 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          org.webjars:webjars-locator-core:0.36
[warn]            +- com.typesafe.sbt:sbt-web:1.4.4 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.sbt:sbt-js-engine:1.2.3 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          com.typesafe.play:twirl-compiler_2.12:1.4.2
[warn]            +- com.typesafe.sbt:sbt-twirl:1.4.2 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          com.lightbend.play:play-file-watch_2.12:1.1.8
...
[error]         typesafe-ivy-releases: unable to get resource for com.typesafe#npm_2.12;1.2.1: res=https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe/npm_2.12/1.2.1/jars/npm_2.12.jar: javax.net.ssl.SSLHandshakeException: Received fatal alert: access_denied
[error]
[error]         at sbt.internal.librarymanagement.IvyActions$.resolveAndRetrieve(IvyActions.scala:332)
[error]         at sbt.internal.librarymanagement.IvyActions$.$anonfun$updateEither$1(IvyActions.scala:208)
[error]         at sbt.internal.librarymanagement.IvySbt$Module.$anonfun$withModule$1(Ivy.scala:239)
[error]         at sbt.internal.librarymanagement.IvySbt.$anonfun$withIvy$1(Ivy.scala:204)
[error]         at sbt.internal.librarymanagement.IvySbt.sbt$internal$librarymanagement$IvySbt$$action$1(Ivy.scala:70)
[error]         at sbt.internal.librarymanagement.IvySbt$$anon$3.call(Ivy.scala:77)
[error]         at xsbt.boot.Locks$GlobalLock.withChannel$1(Locks.scala:95)
[error]         at xsbt.boot.Locks$GlobalLock.xsbt$boot$Locks$GlobalLock$$withChannelRetries$1(Locks.scala:80)
[error]         at xsbt.boot.Locks$GlobalLock$$anonfun$withFileLock$1.apply(Locks.scala:99)
[error]         at xsbt.boot.Using$.withResource(Using.scala:10)
[error]         at xsbt.boot.Using$.apply(Using.scala:9)
[error]         at xsbt.boot.Locks$GlobalLock.ignoringDeadlockAvoided(Locks.scala:60)
[error]         at xsbt.boot.Locks$GlobalLock.withLock(Locks.scala:50)
[error]         at xsbt.boot.Locks$.apply0(Locks.scala:31)
[error]         at xsbt.boot.Locks$.apply(Locks.scala:28)
[error]         at sbt.internal.librarymanagement.IvySbt.withDefaultLogger(Ivy.scala:77)
[error]         at sbt.internal.librarymanagement.IvySbt.withIvy(Ivy.scala:199)
[error]         at sbt.internal.librarymanagement.IvySbt.withIvy(Ivy.scala:196)
[error]         at sbt.internal.librarymanagement.IvySbt$Module.withModule(Ivy.scala:238)
[error]         at sbt.internal.librarymanagement.IvyActions$.updateEither(IvyActions.scala:193)
[error]         at sbt.librarymanagement.ivy.IvyDependencyResolution.update(IvyDependencyResolution.scala:20)
[error]         at sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:56)
[error]         at sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:45)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:93)
[error]         at sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:68)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$19(LibraryManagement.scala:106)
[error]         at scala.util.control.Exception$Catch.apply(Exception.scala:224)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:106)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:89)
[error]         at sbt.util.Tracked$.$anonfun$inputChanged$1(Tracked.scala:149)
[error]         at sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:120)
[error]         at sbt.Classpaths$.$anonfun$updateTask$5(Defaults.scala:2561)
[error]         at scala.Function1.$anonfun$compose$1(Function1.scala:44)
[error]         at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:40)
[error]         at sbt.std.Transform$$anon$4.work(System.scala:67)
[error]         at sbt.Execute.$anonfun$submit$2(Execute.scala:269)
[error]         at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error]         at sbt.Execute.work(Execute.scala:278)
[error]         at sbt.Execute.$anonfun$submit$1(Execute.scala:269)
[error]         at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error]         at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error]         at java.lang.Thread.run(Thread.java:748)
[error] (update) sbt.librarymanagement.ResolveException: unresolved dependency: com.typesafe.play#sbt-routes-compiler_2.12;2.7.3: Resolution failed several times for dependency: com.typesafe.play#sbt-routes-compiler_2.12;2.7.3 {compile=[default(compile)]}::
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finally&#34;&gt;Finally&lt;/h3&gt;

&lt;p&gt;I opened the sample project as the interllij project and &lt;code&gt;install scala plugin&lt;/code&gt; twice(first failed) and restart intellij. Build the project with &lt;code&gt;JAVA_OPTS&lt;/code&gt;, and failed with dependency evcited error.&lt;/p&gt;

&lt;p&gt;So I delete &lt;code&gt;.sbt&lt;/code&gt; and &lt;code&gt;.lvy2&lt;/code&gt; the two folders and reinstall &lt;code&gt;sbt&lt;/code&gt; and restart computer.&lt;/p&gt;

&lt;p&gt;Rerun project success.&lt;/p&gt;

&lt;p&gt;Here is my vm options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-Dhttp.proxyHost=proxyServer
-Dhttp.proxyPort=8080
-Dsbt.repository.secure=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and haven&amp;rsquo;t repository file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;del&gt;Still don&amp;rsquo;t know why failed at the bash/cmd&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;update:&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s wrong if don&amp;rsquo;t set https_proxy.
Create &lt;code&gt;HTTPS_PROXY&lt;/code&gt; and &lt;code&gt;HTTP_PROXY&lt;/code&gt; with windows way. If the proxy server doesn&amp;rsquo;t accept https, add http protocol like &lt;code&gt;HTTPS_PROXY=http://proxyServer:port&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NO repository file, no vm options, just set &lt;code&gt;HTTPS_PROXY&lt;/code&gt; rightly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;refer&#34;&gt;REFER&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43984715/sbt-error-retrieving-required-libraries&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;add repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Favicon</title>
      <link>https://leiheng.github.io/posts/hugo/add-favicon/</link>
      <pubDate>Wed, 07 Aug 2019 10:30:55 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/add-favicon/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;找张你喜欢的图, 传到 &lt;code&gt;realfavicongenerator.net&lt;/code&gt; 上去, 这个网站会生成各种适应图和 &lt;code&gt;html&lt;/code&gt; 供你直接使用.&lt;/li&gt;
&lt;li&gt;下载他给你生成的包, 解压到 &lt;code&gt;static&lt;/code&gt;, 这个 &lt;code&gt;static&lt;/code&gt; 是你根目录的那个, &lt;strong&gt;不是&lt;/strong&gt; themes 里的那个.&lt;/li&gt;
&lt;li&gt;给你的那个&lt;code&gt;html&lt;/code&gt; 插入到 themes 下的 &lt;code&gt;layouts\partials\head.html&lt;/code&gt; 中 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 下.&lt;/li&gt;
&lt;li&gt;over&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jvm Infra</title>
      <link>https://leiheng.github.io/posts/java/jvm/jvm-infra/</link>
      <pubDate>Mon, 05 Aug 2019 18:27:25 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/jvm/jvm-infra/</guid>
      <description>

&lt;h2 id=&#34;infra&#34;&gt;infra&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;java 虚拟机分heap、vm stack(虚拟机栈)、method area、 native method stack(本地方法栈)、program counter register(程序计数器)&lt;/li&gt;
&lt;li&gt;线程共享的是方法区和heap，线程私有的是虚拟机栈、本地方法栈、pc 寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;堆-栈和方法区&#34;&gt;堆、栈和方法区&lt;/h2&gt;

&lt;p&gt;最关系的就是heap了，基本上调优都是在堆上调参数。&lt;/p&gt;

&lt;p&gt;对象是在堆上的，句柄是在栈上，而这个栈就是虚拟机栈(每个Java线程拥有自己的独立的native方法栈就是本地方法栈，面向本地方法(用 C++ 写的 native 方法),栈里面存放了对象的局部变量。方法区就是每个被加载的类的静态变量、常量、类信息等。&lt;/p&gt;

&lt;h2 id=&#34;吞吐量优先的gc&#34;&gt;吞吐量优先的GC&lt;/h2&gt;

&lt;p&gt;CMS收集器的关注点是尽可能&lt;strong&gt;缩短&lt;/strong&gt;垃圾收集时&lt;strong&gt;用户线程的停顿时间&lt;/strong&gt;，而parallel GC更看重一个可控制的&lt;strong&gt;吞吐量&lt;/strong&gt;
&amp;gt; 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)&lt;/p&gt;

&lt;h5 id=&#34;高吞吐量可以高效率的利用cpu-适合后台运算不需要太多交互的任务&#34;&gt;高吞吐量可以高效率的利用CPU，适合后台运算不需要太多交互的任务&lt;/h5&gt;

&lt;h2 id=&#34;gc&#34;&gt;GC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;复制算法：年轻代&lt;/li&gt;

&lt;li&gt;&lt;p&gt;标记-整理：年老代&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Q:FullGC 不是针对持久代的么
A:FullGC is cleaning the entire Heap - both Young and Tenured spaces
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;　MinorGC 针对Eden代的（复制算法实现 ： Eden -&amp;gt; survivor0 -&amp;gt;survivor1）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;MajorGC is cleaning the Tenured space(老年代)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eden 的对象经历过Eden -&amp;gt; survivor0 -&amp;gt;survivor1 -&amp;gt;老年代&lt;/p&gt;

&lt;p&gt;Eden是新生对象的存储区域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; 什么情况下新生代对象会晋升到老年代？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; 当对象大小超过了PretenureSizeThreshold设置的对象大小阀值时，对象直接在老年代分配空间
当age从1开始的对象大小累计超过了Survivor区域的1/2(TargetSurvivorRatio所定义)时，会计算一个Thenuring Threshold，超过这个年龄的新生代对象会进入到老年代，即使这时候新生代还有很多的空间。注意MaxTenuringThreshold只是设置了最大的Thenuring Threshold，不是说只有大于Max Tenuring Threshold才会进入到老年代，而是只要超过了计算出来的Tenuring Threshold就会进入老年代，MaxTenuringThreshold规定了Tenuring Threshold的最大值而已。Tenuring Threshold这个值在每一轮GC后都会动态计算，它与TargetSurvivorRatio以及Survivor区的大小有关系，TargetSurivivor默认是50即Survivor的1/2, 会计算出一个Desired Survivor Size，当age从1开始的对象大小累计超过了这个Desired Survivor Size，那么这个age就是Tenuring Threshold的值&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;尽可能地让对象停留在新生代&lt;/p&gt;

&lt;p&gt;因为新生代采用了复制算法，相对收回得更快，而且Minor GC的次数肯定比Full GC多，那么对象在新生代被清除的更能性会更高。而对象一旦进入到老年代，那么只有Full GC时才会回收，对象在整个系统停留的时间就会很长，很可能创建的它的线程早就死了，而它还活着&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了尽可能让对象停留在新生代，就要注意设置Survivor区域的大小
因为它直接和对象是否进入老年代相关。之前就遇到过这种情况，明明新生代还有很大的空间，但是每次Minor GC后总是有对象进入到了老年代。后来发现由于Survivor太小，导致Tenuring Threshold为1，意思是年龄为1的对象大小超过了Survivor / 2(可通过TargetSurvivorRatio来调节，默认是50，即1/2)，年龄只要超过1的对象这时候就要直接进入老年代了。而进入老年代，对象就只有在Full GC的时候才会被清除。而如果调大了Survivor空间，让对象对象尽量接近Max Tenuring Threshold时才进入到老年代，这时候会大大减少老年代的对象大小，并且让对象在新生代停留时间变长，提高了它们被快速清理出系统的概率&lt;/p&gt;

&lt;h2 id=&#34;jvm-properties&#34;&gt;JVM properties&lt;/h2&gt;

&lt;h3 id=&#34;memory-properties&#34;&gt;Memory properties&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-Xmx &lt;nG&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;最大堆大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-Xms &lt;nG&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;初始堆大小,启动jvm时堆内存大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:NewRatio&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;新生代和老年代的内存比&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:NewSize&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;新生代内存大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:SurvivorRatio&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Eden和Survivor的内存比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;gc-properties&#34;&gt;GC properties&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:MaxGCPauseMilis=&lt;ms&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;为所需的最长暂停时间设置目标值。默认值是 200 毫秒。指定的值不适用于您的堆大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-XX:InitiatingHeapOccupancyPercent=&amp;lt;%&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintGCDetails&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;打印GC详细信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintAdaptiveSizePolicy&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:G1HeapRegionSize&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置G1区域的大小，值是2的幂，范围是1M-32M之间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintReferenceGC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+ParallelRefProcEnabled&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:ParallelGCThreads=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Parallel并行收集器的线程数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:ConcGCThreads=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 左右&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:G1MixedGCCountTarget=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent的旧区域执行混合垃圾回收的目标次数。默认值是8次混合垃圾回收。混合回的目标是要控制在此目标次数以内。Java HotSpot VM build 23 中没有此设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;jvm-一些参数列表&#34;&gt;jvm 一些参数列表&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;INSTALLER_JAVA_OPTS: &amp;quot;-XX:+UseG1GC -XX:MaxRAMFraction=2 -XshowSettings:vm&amp;quot;
JVM启动参数可以添加-XX:+HeapDumpOnOutOfMemoryError -XX:+PrintHeapAtGC 等参数来协助收集JVM内存溢出信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数解释：
1000m（毫） 一个CPU
100m 0.1cpu&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zhaoyanblog.com/archives/440.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;-XX:+UseG1GC&lt;/code&gt;&lt;/a&gt; : 告诉JVM使用G1 GC
(这篇文章有G1 GC 开关选项完全列表)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:MaxRAMFraction&lt;/code&gt; : Using -XX:MaxRAMFraction we are telling the JVM to use available memory/MaxRAMFraction as max heap. Using -XX:MaxRAMFraction=1 we are using almost all the available memory as max heap
&lt;a href=&#34;https://blog.csanchez.org/2017/05/31/running-a-jvm-in-a-container-without-getting-killed/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;动态的使用container的内存&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XshowSettings&lt;/code&gt; ：显示Setting&lt;/p&gt;

&lt;h3 id=&#34;g1收集器&#34;&gt;G1收集器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方教程&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;G1的年轻代的回收:复制算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;年轻代=Eden + survivor0 + survivor1&lt;/p&gt;

&lt;p&gt;G1收集器与其他收集器不同，他没有新生代、老年代、持久代的的物理memory区域，他是把内存划分为相等小大小的region（独立区域）&lt;/p&gt;

&lt;p&gt;G1 GC 是区域化、分代式垃圾回收器，这意味着 Java 对象堆（堆）被划分成大小相同的若干区域。启动时，Java 虚拟机 (JVM) 会设置区域大小。区域大小从 1 MB 到 32 MB 不等，具体取决于堆大小。目标是产生不超过 2048 个区域。Eden、存活空间和老年代是一系列不连续的逻辑区域。&lt;/p&gt;

&lt;p&gt;G1还有个重要的特性&amp;ndash;能够设置在长度为M毫秒的时间片段里面，消耗在GC上的时间不得超过N毫秒。&lt;/p&gt;

&lt;p&gt;对于使用G1收集器来说，是不是不需要参数调优了？&lt;a href=&#34;https://www.zhihu.com/question/55564388&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;不是的&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;如何解锁实验性虚拟机标志&#34;&gt;如何解锁实验性虚拟机标志&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;要更改实验性标志的值，必须先对其解锁。解锁方法是：在命令行中的实验性标志前，显式地设置 -XX:+UnlockExperimentalVMOptions&lt;/p&gt;

&lt;p&gt;例如：
java -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75  G1test.jar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;重要的参数&#34;&gt;重要的参数&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-XX:G1HeapRegionSize=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:MaxGCPauseMillis=200&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为所需的最长暂停时间设置目标值。默认值是 200 毫秒。指定的值不适用于您的堆大小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1NewSizePercent=5&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置要用作年轻代大小最小值的堆百分比。默认值是 Java 堆的 5%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:DefaultMinNewGenPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1MaxNewSizePercent=60&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置要用作年轻代大小最大值的堆大小百分比。默认值是 Java 堆的 60%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:DefaultMaxNewGenPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:ParallelGCThreads=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。
如果逻辑处理器不止八个，则将 n 的值设置为逻辑处理器数的 &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; 左右。这适用于大多数情况，除非是较大的 SPARC 系统，其中 n 的值可以是逻辑处理器数的 &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;16&lt;/sub&gt; 左右。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:ConcGCThreads=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 左右。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:InitiatingHeapOccupancyPercent=45&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1MixedGCLiveThresholdPercent=65&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为混合垃圾回收周期中要包括的旧区域设置占用率阈值。默认占用率为 65%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:G1OldCSetRegionLiveThresholdPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1HeapWastePercent=10&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置您愿意浪费的堆百分比。如果可回收百分比小于堆废物百分比，Java HotSpot VM 不会启动混合垃圾回收周期。默认值是 10%。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1MixedGCCountTarget=8&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置标记周期完成后，对存活数据上限为 G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数。默认值是 8 次混合垃圾回收。混合回收的目标是要控制在此目标次数以内。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-XX:G1OldCSetRegionThresholdPercent=10&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置混合垃圾回收期间要回收的最大旧区域数。默认值是 Java 堆的 10%。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1ReservePercent=10&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险。默认值是 10%。增加或减少百分比时，请确保对总的 Java 堆调整相同的量。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内存溢出-调整g1收集器&#34;&gt;内存溢出 &amp;amp; 调整G1收集器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000007815623&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;case1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有关溢出和用尽的日志消息
当您在日志中看到目标空间溢出/用尽的消息时，意味着 G1 GC 没有足够的内存，供存活者和/或晋升对象使用。Java 堆不能扩展，因为已达到最大值。示例消息：&lt;/p&gt;

&lt;p&gt;924.897: [GC pause (G1 Evacuation Pause) (mixed) (to-space exhausted), 0.1957310 secs]&lt;/p&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;p&gt;924.897:[GC pause (G1 Evacuation Pause) (mixed) (to-space overflow), 0.1957310 secs]&lt;/p&gt;

&lt;p&gt;要缓解此问题，请尝试以下调整：&lt;/p&gt;

&lt;p&gt;增加 &lt;code&gt;-XX:G1ReservePercent&lt;/code&gt; 选项的值（并相应增加总的堆大小），为“目标空间”增加预留内存量。&lt;/p&gt;

&lt;p&gt;通过减少 &lt;code&gt;-XX:InitiatingHeapOccupancyPercent&lt;/code&gt; 提前启动标记周期。&lt;/p&gt;

&lt;p&gt;您也可以通过增加 &lt;code&gt;-XX:ConcGCThreads&lt;/code&gt; 选项的值来增加并行标记线程的数目。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：不断的调整jvm内存比例，老年代、年轻代、以及持久代的比例，直到测试出一个比较满意的值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://allegro.tech/2018/05/a-comedy-of-errors-debugging-java-memory-leaks.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;case2&lt;/a&gt;&lt;a href=&#34;http://www.importnew.com/29591.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这个例子里面, 主要的问题是 &lt;strong&gt;premature tenuring&lt;/strong&gt;(过早提升), 用了 &lt;code&gt;-XX:G1NewSizePercent=5&lt;/code&gt; &amp;amp; &lt;code&gt;-XX:G1MaxNewSizePercent=60&lt;/code&gt; &amp;amp; &lt;code&gt;-XX:G1MixedGCLiveThresholdPercent=65&lt;/code&gt; 这三个参数, 虽然并没有直接解决问题. 虽然都是提高young 的大小,但是使用的参数是不一样的.&lt;/p&gt;

&lt;h2 id=&#34;jvm-的静态绑定和动态绑定&#34;&gt;JVM 的静态绑定和动态绑定&lt;/h2&gt;

&lt;p&gt;waiting&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NFS Sharing</title>
      <link>https://leiheng.github.io/posts/linux/linux-sharing/</link>
      <pubDate>Mon, 05 Aug 2019 16:12:53 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/linux-sharing/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://cn.linux.vbird.org/linux_server/0330nfs.php&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;参考文档：鸟哥&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nfs-netfilesystem&#34;&gt;NFS：NetFileSystem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;在启动NFS之前就要启动 Remote Procedure Call（RPC）&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;rpc&#34;&gt;RPC：&lt;/h3&gt;

&lt;p&gt;因为 NFS 支持的功能相当的多，而不同的功能都会使用不同的程序来启动， 每启动一个功能就会启用一些端口来传输数据，因此， NFS 的功能所对应的端口才没有固定住， 而是随机取用一些未被使用的小于 1024 的埠口来作为传输之用。但如此一来又造成客户端想要连上服务器时的困扰， 因为客户端得要知道服务器端的相关埠口才能够联机吧！&lt;/p&gt;

&lt;p&gt;此时我们就得需要远程过程调用 (RPC) 的服务啦！RPC 最主要的功能就是在指定每个 NFS 功能所对应的 port number ，并且回报给客户端，让客户端可以连结到正确的埠口上去。 那 RPC 又是如何知道每个 NFS 的埠口呢？这是因为当服务器在启动 NFS 时会随机取用数个埠口，并主动的向 RPC 注册，因此 RPC 可以知道每个埠口对应的 NFS 功能，然后 RPC 又是固定使用 port 111 来监听客户端的需求并回报客户端正确的埠口， 所以当然可以让 NFS 的启动更为轻松愉快了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;所以你要注意，要启动 NFS 之前，RPC 就要先启动了，否则 NFS 会无法向RPC注册。另外，RPC 若重新启动时，原本注册的数据会不见，因此RPC重新启动后，它管理的所有服务都需要重新启动来重新向 RPC 注册。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;nfs-的档案访问权限&#34;&gt;NFS 的档案访问权限&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(相关：Linux的 user、group)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;client的的uid和server folder开放的权限以及文件本身的读写权限&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当client的uid(非root)能在server上找到对应用户，则client的身份就是该对应用户，以该用户身份操作文件&lt;/li&gt;
&lt;li&gt;当client的uid(非root)不能在server上找到，则client的身份被压缩成anonymous。！！！有例外，当被expose folder是/tmp 时，这种情况下client的uid不变。(虽然很诡异，但是事实就是这样)&lt;/li&gt;
&lt;li&gt;当client的身份是root，server开放权限是root_squash，则client身份被压缩成anonymous，这个时候就要看文件本身对anonymous用户开放的权限(anonymous 对应为 other)&lt;/li&gt;
&lt;li&gt;当client的身份是root，server开放权限是no_root_squash,则client在server上操作文件的身份就是root&lt;/li&gt;
&lt;li&gt;当server开放的权限是all_squash，无论client的身份是root还是其他、uid是否能在server上找到对应用户，一律被压缩成anonymous&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;npc-需要的软件&#34;&gt;NPC 需要的软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RPC主程序：rpcbind&lt;/li&gt;
&lt;li&gt;NFS主程序：nfs-utils&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

#这个脚本作用是如果机器上没有安装nfs服务，安装服务，暴露目录，启动服务
#传入参数：暴露的目录（dir）、是否存在nfs-server（boolean）、UID、GID

#default expose folder /nfsdir
folder=${1:-&amp;quot;/var/vols/itom/core&amp;quot;}
isNFSServer=${2:-&amp;quot;true&amp;quot;}
userId=${3:-&amp;quot;1999&amp;quot;}
groupId=${4:-&amp;quot;1999&amp;quot;}
setupNFS(){
    echo &amp;quot;Setting up the NFS service ... &amp;quot;
    path=$(dirname $0)
    cd $path
    #check if NFS is installed
    isNFS=`rpm -qa|grep nfs-utils|wc -l`
    if [ $isNFS = 0 ]; then
        #install NFS with yum first. If the first try is failed then install NFS with rpm
        yum install -y nfs-utils 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
        if [ $? != 0 ]; then
            rpm -ivh ../rpm/rpcbind-0.2.0-26.el7.x86_64.rpm 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
            rpm -ivh ../rpm/nfs-utils-1.3.0-0.8.el7.x86_64.rpm 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
            if [ $? != 0 ]; then
                echo &amp;quot;The NFS service installation failed.&amp;quot;
                echo &amp;quot;If you have a CentOS repo or you can access the Internet from this host,&amp;quot;
                echo &amp;quot;you can install NFS with the command \&amp;quot;yum install -y ufs-utils\&amp;quot;.&amp;quot;
                echo &amp;quot;If you don&#39;t have a CentOS repo and cannot access the Internet from this&amp;quot;
                echo &amp;quot;host, please download the nfs-utils and rpcbind packages and upload them&amp;quot;
                echo &amp;quot;to this host. Then run the command \&amp;quot;rpm -ivh &amp;lt;rpm-package-name&amp;gt;\&amp;quot; to install.&amp;quot;
                exit 1
            fi
        fi
        isNFS=`rpm -qa|grep nfs-utils|wc -l`
        if [ $isNFS -gt 0 ]; then
            echo &amp;quot;The NFS service was installed successfully.&amp;quot;
        fi
    else
        echo &amp;quot;The NFS service was found to be already installed.&amp;quot;
    fi
}

exposeFolder() {
    nfsdir=$1
    echo &amp;quot;Exposing the folder ${nfsdir} ...&amp;quot;
    if [ ! -d $nfsdir ]; then
        mkdir -p $nfsdir
    fi
    chown -R ${userId}:${groupId} $nfsdir
    #if nfsdir isn&#39;t exist on exports,adding or not
    isConfig=`grep -v &#39;^$\|^\s*\#&#39; /etc/exports|grep &amp;quot;$nfsdir &amp;quot;|wc -l `
    if [ $isConfig = 0 ]; then
    echo &amp;quot;$nfsdir *(rw,sync,anonuid=${userId},anongid=${groupId},all_squash)&amp;quot;&amp;gt;&amp;gt;/etc/exports
    fi
    exportfs -ra
    systemctl restart rpcbind
    systemctl enable rpcbind
    systemctl restart nfs-server
    systemctl enable nfs-server
}

#main
setupNFS
if [ &amp;quot;$isNFSServer&amp;quot; = true ]; then
    exposeFolder $folder
else
    echo &amp;quot;If you want to expose your nfs folder.&amp;quot;
    echo &amp;quot;Usage: $0 [folder] [true] [userId] [groupId]&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;用户权限&#34;&gt;用户权限：&lt;/h5&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rw ：read write&lt;/li&gt;
&lt;li&gt;ro ：read only&lt;/li&gt;
&lt;li&gt;sync ：直接写入内存与硬盘&lt;/li&gt;
&lt;li&gt;async ：先写入缓存&lt;/li&gt;
&lt;li&gt;no_root_squash ：client可以root权限操作&lt;/li&gt;
&lt;li&gt;root_squash ：client以root登陆会被压缩成匿名用户&lt;/li&gt;
&lt;li&gt;all_squash ：无论以什么身份登陆都会被压缩成匿名用户&lt;/li&gt;
&lt;li&gt;anonuid ：匿名用户的uid&lt;/li&gt;
&lt;li&gt;anongid ：匿名用户的gid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tip：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;all_squash 要配合 anonuid、gid使用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;anonuid、&lt;del&gt;gid可以单独使用&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;client-挂载&#34;&gt;client 挂载&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;mount -t nfs serverip:expose_fold   client_mount_fold&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;automount-autofs&#34;&gt;automount————autofs&lt;/h3&gt;

&lt;p&gt;autofs：在客户端上应用
在客户端计算机上，会持续侦测某个指定目录，并预先设定当使用该目录下的某个次目录下时，将会取得来自服务端的NFS文件系统资源，并进行自动挂载的动作&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;li&gt;rpm -qa | grep nfs &amp;amp;&amp;amp; rpm -qa | grep rpcbind //判断是否有nfs服务&lt;/li&gt;
&lt;li&gt;vim /etc/exports //文件中写要export出去的目录或者文件
/tmp 195.154.1.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;25&lt;/sub&gt;(ro) localhost(rw) // 将/tmp目录exports给IP地址为195.154.1.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;25&lt;/sub&gt; (权限为ro)、localhost(权限为rw)&lt;/li&gt;
&lt;li&gt;exportfs -ra
systemctl restart rpcbind
systemctl enable rpcbind
systemctl restart nfs-server
systemctl enable nfs-server&lt;/li&gt;
&lt;li&gt;showmount -e localhost&lt;/li&gt;
&lt;li&gt;client&lt;/li&gt;
&lt;li&gt;mount -t nfs 192.168.100.254:/home/public /tmp //将IP为192.168.100.254的/home/public挂载到/tmp上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showmount -e serverhost&lt;/code&gt; 查看server端有哪些file可以被mount&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df&lt;/code&gt;或者&lt;code&gt;mount&lt;/code&gt;查看mount file之后的情况&lt;/li&gt;
&lt;li&gt;umount /home/nfs/public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux Command</title>
      <link>https://leiheng.github.io/posts/linux/linux-command/</link>
      <pubDate>Mon, 05 Aug 2019 15:53:33 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/linux-command/</guid>
      <description>

&lt;h2 id=&#34;bash-script&#34;&gt;bash script&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;include-other-bash-file-in-your-script-https-stackoverflow-com-questions-10823635-how-to-include-file-in-a-bash-shell-script&#34;&gt;include other bash file in your &lt;a href=&#34;https://stackoverflow.com/questions/10823635/how-to-include-file-in-a-bash-shell-script&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;script&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Above answers is correct, but if run script in other folder, there will be some problem.
For example, the a.sh and b.sh are in same folder, a include b with  . ./b.sh to include.
When run script out of the folder, for example with xx/xx/xx/a.sh, file b.sh will not found: ./b.sh: No such file or directory.
I use&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;. $(dirname &amp;quot;$0&amp;quot;)/b.sh&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;common&#34;&gt;common&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linux提供&lt;code&gt;$?&lt;/code&gt;特殊变量来保存最后一条命令执行结束的退出状态, 正常的情况下，命令成功执行完成的退出状态是0&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [$? -eq 0] ; then
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set -e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code&gt;set -e&lt;/code&gt;之后出现的代码，一旦出现了除0之外的返回值，整个脚本直接退出&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bash -c&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;bash -x&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -x -c &amp;quot;curl www.google.com &amp;amp;&amp;amp; ls&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt;:表示debug,会将执行的命令一个一个打出来; &lt;code&gt;-c&lt;/code&gt;：则是执行收到的字符串 (如例子就是执行&lt;code&gt;curl www.google.com &amp;amp;&amp;amp; ls&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;source&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;. ./filename&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;./filename &lt;strong&gt;&lt;a href=&#34;https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it?noredirect=1&amp;amp;lq=1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;reference&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;common-1&#34;&gt;Common&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.computerhope.com/unix/umkdir.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;mkdir&lt;/a&gt; -p /&amp;hellip;. 创建目录并创建他的父目录 java中有mkdirs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/cn/topics/calish-find-096463-zhs.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;refer&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create huge file: &lt;code&gt;fallocate -l 10G fileName.txt&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看版本信息&#34;&gt;查看版本信息&lt;/h3&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cat /etc/*release&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;查看命令完整路径&#34;&gt;查看命令完整路径&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;readlink -f jmeter&lt;/code&gt; -&amp;gt; &lt;code&gt;/root/apach-jmeter/bin/jmeter&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;diff-between-sudo-and-su&#34;&gt;diff between sudo and su&lt;/h3&gt;

&lt;h3 id=&#34;环境变量&#34;&gt;环境变量&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;printenv 打印环境变量&lt;/li&gt;
&lt;li&gt;export PATH=$PATH:dir 导入环境变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;source /etc/profile //在不重启终端的情况下使修改过后的profile生效
&amp;gt; docker 中不提倡用source&lt;/p&gt;

&lt;h4 id=&#34;shell-envsubst-replace-placeholder&#34;&gt;shell &lt;code&gt;envsubst&lt;/code&gt; replace placeholder&lt;/h4&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;substitute env variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source ${env_script}
cat /opt/content/cfg.tmpl | envsubst &amp;gt; /opt/content/config/Content.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个意思就是把tmpl文件中的placeholder 替换,然后将输出写成cfg文件&lt;/p&gt;

&lt;h2 id=&#34;文件相关&#34;&gt;文件相关&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;文件权限相关&#34;&gt;文件权限相关&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;chmod -R&lt;/code&gt;: change modify 更改文件的访问权限(递归，将下层文件权限也改了)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod +x&lt;/code&gt;: 加执行权限(注意的是&lt;strong&gt;X&lt;/strong&gt;和x不一样)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod g+s&lt;/code&gt;: 执行此 command ，在此目录下，不管是谁创建新的目录都会与父目录有相同 own&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chown&lt;/code&gt; ：change owner 更改文件拥有者 !!! chown doesn&amp;rsquo;t check if the uid and gid haven&amp;rsquo;t registed in /etc/group and /etc/passwd&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groupadd -g gid uidname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useradd -g gid -u uid uername&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;su -u username -E nohup&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;文件目录切换&#34;&gt;文件目录切换&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pushed +n(n 是数字)&lt;/li&gt;
&lt;li&gt;dirs -v&lt;/li&gt;
&lt;li&gt;popd +n&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;read-file&#34;&gt;Read file&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;屏幕持续输出-并将输出内容保存文件&#34;&gt;屏幕持续输出，并将输出内容保存文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cmd|tee filename&lt;/code&gt;
示例：
&lt;code&gt;kl pod -f|tee filename&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;cat&#34;&gt;cat&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt; filename &amp;lt;&amp;lt;-EOF
first
second
EOF
----------
cat &amp;lt;&amp;lt;- EOF &amp;gt; filename 
first
second
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;两种写法都可以&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;将输入的多行内容写入到filename这个文件中去.
&amp;lt;&amp;lt;- 的唯一变化就是Here Document 的内容部分每行前面的 tab (制表符)将会被删除掉，这种用法是为了编写Here Document的时候可以将内容部分进行缩进，方便阅读代码.eof=&amp;gt;end of file,他可以被替换成其他合法字符&lt;/p&gt;

&lt;h3 id=&#34;more-less&#34;&gt;more|less&lt;/h3&gt;

&lt;p&gt;less is more
&lt;code&gt;more file&lt;/code&gt;: 空格翻屏&lt;/p&gt;

&lt;h3 id=&#34;tail&#34;&gt;tail&lt;/h3&gt;

&lt;p&gt;tail 是从文件尾部读的，有篇&lt;a href=&#34;https://blog.lilydjwg.me/2018/9/20/never-tail-f-a-pipe.213518.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;很有意思,里面讲了一个bug，但是也讲了tail的原理&lt;/p&gt;

&lt;h2 id=&#34;文件传输&#34;&gt;文件传输&lt;/h2&gt;

&lt;h3 id=&#34;scp&#34;&gt;scp&lt;/h3&gt;

&lt;p&gt;I love scp
&lt;code&gt;scp remote-host:remote-file local-file&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;sftp&#34;&gt;sftp&lt;/h3&gt;

&lt;p&gt;比如本地ip是li-1，远程是li-4
- 连接远程服务器&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sftp username@remoteIP&lt;/code&gt;
- 本地文件传输到远端&lt;/p&gt;

&lt;p&gt;&lt;code&gt;put -r filename&lt;/code&gt;
注意本地是指li-1
- 远端文件下载到本地&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get -r filename&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bye                                Quit sftp
cd path                            Change remote directory to &#39;path&#39;
chgrp grp path                     Change group of file &#39;path&#39; to &#39;grp&#39;
chmod mode path                    Change permissions of file &#39;path&#39; to &#39;mode&#39;
chown own path                     Change owner of file &#39;path&#39; to &#39;own&#39;
df [-hi] [path]                    Display statistics for current directory or
                                   filesystem containing &#39;path&#39;
exit                               Quit sftp
get [-afPpRr] remote [local]       Download file
reget [-fPpRr] remote [local]      Resume download file
reput [-fPpRr] [local] remote      Resume upload file
help                               Display this help text
lcd path                           Change local directory to &#39;path&#39;
lls [ls-options [path]]            Display local directory listing
lmkdir path                        Create local directory
ln [-s] oldpath newpath            Link remote file (-s for symlink)
lpwd                               Print local working directory
ls [-1afhlnrSt] [path]             Display remote directory listing
lumask umask                       Set local umask to &#39;umask&#39;
mkdir path                         Create remote directory
progress                           Toggle display of progress meter
put [-afPpRr] local [remote]       Upload file
pwd                                Display remote working directory
quit                               Quit sftp
rename oldpath newpath             Rename remote file
rm path                            Delete remote file
rmdir path                         Remove remote directory
symlink oldpath newpath            Symlink remote file
version                            Show SFTP version
!command                           Execute &#39;command&#39; in local shell
!                                  Escape to local shell
?                                  Synonym for help
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;端口相关&#34;&gt;端口相关&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;查看这个端口有没有开放 &lt;code&gt;lsof -i:80&lt;/code&gt;,如果有显示输出就说明开放了。&lt;/li&gt;
&lt;li&gt;查看某一端口的情况 &lt;code&gt;netstat -pan|grep 8090&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;防火墙iptable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;上古命令&#34;&gt;上古命令&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;在vim里面&lt;code&gt;ctrl + s&lt;/code&gt;卡死屏幕
&lt;code&gt;ctrl + q&lt;/code&gt;恢复 (以及在有道云里面也会这样)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;process&#34;&gt;process&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;list-process&#34;&gt;list process&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt; list all process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps -aux&lt;/code&gt; or &lt;code&gt;ps -ef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top -Hp pid&lt;/code&gt; list all thread in one process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jstack pid &amp;gt; pid.log&lt;/code&gt; 将线程栈 dump 到日志文件中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kill-process&#34;&gt;kill process&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SIGINT&lt;/code&gt; 跟&lt;code&gt;ctrl+c&lt;/code&gt;关联，只能杀掉前台进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGTERM&lt;/code&gt; 处理前台、后台进程但是可以被阻塞、被忽略。可以让程序友好的退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGKILL&lt;/code&gt; 立即执行，大杀器，是直接发往系统内核的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill -9&lt;/code&gt; 卧槽，很危险，危险到这是没有办法了才执行的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;subshell&#34;&gt;subshell&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create an Object</title>
      <link>https://leiheng.github.io/posts/design-patterns/create-an-object/</link>
      <pubDate>Fri, 02 Aug 2019 16:50:38 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/design-patterns/create-an-object/</guid>
      <description>

&lt;h2 id=&#34;builder-pattern&#34;&gt;Builder Pattern&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Getter
@Setter
public class BuilderSample {
  private String compo;
  private boolean flag;

  private BuilderSample(SampleBuild build) {
    this.compo = build.compo;
    this.flag = build.flag;
  }

  public static class SampleBuild {
    private String compo;
    private boolean flag = false;

    public BuilderSample build() {
      return new BuilderSample(this);
    }

    public SampleBuild setCompo(String compon) {
      this.compo = compon;
      return this;
    }

    public SampleBuild setFlag(boolean flag) {
      this.flag = flag;
      return this;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt; use &lt;code&gt;@Bulid&lt;/code&gt; ,everything is simple.&lt;/p&gt;

&lt;h2 id=&#34;factory-patterna&#34;&gt;Factory Patterna&lt;/h2&gt;

&lt;h2 id=&#34;singleton-pattern&#34;&gt;Singleton Pattern&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Best way to to implement a singleton pattern in Java is use &lt;code&gt;enum&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a single-element enum type is the best way to implement a singleton. &amp;ndash;&amp;ldquo;Effective java&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public enum StatusEnum {
    SUCCESS(&amp;quot;9000&amp;quot;, &amp;quot;success&amp;quot;),
    private final String[] favoriteSongs =
        { &amp;quot;Hound Dog&amp;quot;, &amp;quot;Heartbreak Hotel&amp;quot; };
    public void printFavorites() {
        System.out.println(Arrays.toString(favoriteSongs));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;double check create singleton&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class StatusEnum{
    private volatile static StatusEnum instance;
    private StatusEnum(){}
    public static StatusEnum getInstance(){
        if(instance == null){
            synchronized (StatusEnum.class){
                if (instance == null){
                    instance = new StatusEnum();
                }
            }
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diff StatefulSet and Deployment</title>
      <link>https://leiheng.github.io/posts/k8s/diff-statefulset-and-deployment/</link>
      <pubDate>Fri, 02 Aug 2019 15:53:01 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/diff-statefulset-and-deployment/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Deployment - You specify a PersistentVolumeClaim that is shared by all pod replicas. In other words, shared volume.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The backing storage obviously must have ReadWriteMany or ReadOnlyMany accessMode if you have more than one replica pod.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;StatefulSet - You specify a volumeClaimTemplates so that each replica pod gets a unique PersistentVolumeClaim associated with it. In other words, no shared volume.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, the backing storage can have ReadWriteOnce accessMode&lt;/p&gt;

&lt;p&gt;The deployment replicas pod share the same pv but stateful set not. Each statefulset pod has own pv-pvc.&lt;/p&gt;

&lt;p&gt;StatefulSet使用Headless服务来控制Pod的域名,那么这个pod的域名的FQDN为: &lt;code&gt;$(pod-name).$(service-name).$(namespace).svc.cluster.local&lt;/code&gt;. 其中,&lt;code&gt;cluster.local&lt;/code&gt;指的是集群的域名.&lt;/p&gt;

&lt;h2 id=&#34;statefulset&#34;&gt;StatefulSet&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;StatefulSet 控制的 pod 都是有状态的, 而像 deployment &amp;amp; replicaSet 这种就是 Stateless 无状态的. 具体表现为 StatefulSet 控制的pod并不分享pv - pvc.
&lt;del&gt;他们使用的&lt;code&gt;pv accessmode&lt;/code&gt; 都是 &lt;code&gt;ReadWriteOnce&lt;/code&gt;&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&#34;headless-service&#34;&gt;Headless Service&lt;/h3&gt;

&lt;p&gt;Headless service主要是用于分配DNS固定域名给那些 &lt;code&gt;StatefulSet&lt;/code&gt; 控制的 pod, 与这些 pod 通信主要是靠 DNS 而非 ip.&lt;/p&gt;

&lt;p&gt;作为headless service [&amp;hellip;.waiting]&lt;/p&gt;

&lt;h3 id=&#34;pv-pvc-volumeclaimtemple-about-statefulset&#34;&gt;pv &amp;amp; pvc &amp;amp; volumeClaimTemple about StatefulSet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Static:
集群管理员创建多个PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可用于消费.&lt;/li&gt;
&lt;li&gt;Dynamic:
当管理员创建的静态PV都不匹配用户的PersistentVolumeClaim时，集群可能会尝试为PVC动态配置卷。 此配置基于StorageClasses：PVC必须请求一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so, 关于 StatefulSet 的 pv pvc binding 就是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自己手动创建 PV &amp;amp; PVC 并且注意好 pvc 的命名&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;StorageClass&lt;/code&gt; 动态 绑定&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;named-pvc&#34;&gt;named pvc&lt;/h4&gt;

&lt;p&gt;Create &lt;code&gt;volumeClaimTemplates&lt;/code&gt; like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  volumeClaimTemplates:
  - metadata:
      name: &amp;quot;pvc-prefix&amp;quot;
    spec:
      accessModes:
      - &amp;quot;ReadWriteOnce&amp;quot;
      storageClassName: &amp;quot;storageName&amp;quot;
      resources:
        requests:
          storage: &amp;quot;1Gi&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, your pvc must named &lt;code&gt;pvc-prefix-stsName-indx&lt;/code&gt; like &lt;code&gt;rabbitmq-infra-rabbitmq-0&lt;/code&gt;, statefulSet name is infra-rabbitmq. Otherwise, pod will be always &lt;code&gt;Pending&lt;/code&gt; because of cannot find mapping pvc.&lt;/p&gt;

&lt;h2 id=&#34;access-modes&#34;&gt;access modes&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Kubernetes supports 3 kinds of access mode for persistent volume: ReadWriteOnce, ReadOnlyMany, ReadWriteMany.&lt;/p&gt;

&lt;p&gt;If a pod mounts a volume with &lt;strong&gt;ReadWriteOnce&lt;/strong&gt; access mode, no other pod can mount it.&lt;/p&gt;

&lt;p&gt;Most of our pod mounted the pv with  &lt;code&gt;ReadWriteMany&lt;/code&gt;. These pod share same resource.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ReadOnlyMany&lt;/code&gt; indicate this pv only can be read but no write right.&lt;/p&gt;

&lt;h3 id=&#34;refer&#34;&gt;REFER&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;pv access modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/37649541/kubernetes-persistent-volume-accessmode&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;stackoverflow k8s pv accessmode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Dynamic Volume Provisioning - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install K8s The Hard Way</title>
      <link>https://leiheng.github.io/posts/k8s/install-k8s-hard-way/</link>
      <pubDate>Fri, 02 Aug 2019 15:20:37 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/install-k8s-hard-way/</guid>
      <description>&lt;p&gt;Language is simple, show me your code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# close swap
setenforce 0
sudo sed -i &#39;/SELINUX=enforcing/ s/enforcing/disabled/&#39; /etc/selinux/config
sudo swapoff -a  
sudo sed -i &#39;/ swap / s/^/#/g&#39; /etc/fstab

reboot

# set proxy
cat&amp;gt;&amp;gt;/etc/profile&amp;lt;&amp;lt;-EOF
export http_proxy=http://proxy.houston.hpecorp.net:8080
export https_proxy=http://proxy.houston.hpecorp.net:8080
EOF

source /etc/profile

mkdir /root/all-file
cd /root/all-file

# get docker and set proxy for docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

mkdir -p /etc/systemd/system/docker.service.d
cat&amp;gt;&amp;gt;/etc/systemd/system/docker.service.d/http-proxy.conf&amp;lt;&amp;lt;-EOF
[Service]
Environment=&amp;quot;HTTP_PROXY=http://proxy-llb-hpm01.sgp.hp.com:8080&amp;quot; &amp;quot;HTTPS_PROXY=http://proxy-llb-hpm01.sgp.hp.com:8080&amp;quot; &amp;quot;NO_PROXY=localhost,127.0.0.1,.hp.com,.hpe.com,.hpeswlab.net,.hpecorp.net,.softwaregrp.net,.swinfra.net&amp;quot;
EOF

sudo systemctl daemon-reload
sudo systemctl restart docker

mkdir /root/all-file/ssl -p

cd ssl

# install cfssl
curl -LO https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
chmod +x cfssl_linux-amd64
mv cfssl_linux-amd64 /usr/local/bin/cfssl

curl -LO https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
chmod +x cfssljson_linux-amd64
mv cfssljson_linux-amd64 /usr/local/bin/cfssljson

curl -LO https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
chmod +x cfssl-certinfo_linux-amd64
mv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo

export PATH=/usr/local/bin:$PATH

# create ca-config
mkdir /root/ssl
cd /root/ssl
cfssl print-defaults config &amp;gt; config.json
cfssl print-defaults csr &amp;gt; csr.json

cat &amp;gt; ca-config.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;signing&amp;quot;: {
    &amp;quot;default&amp;quot;: {
      &amp;quot;expiry&amp;quot;: &amp;quot;87600h&amp;quot;
    },
    &amp;quot;profiles&amp;quot;: {
      &amp;quot;kubernetes&amp;quot;: {
        &amp;quot;usages&amp;quot;: [
            &amp;quot;signing&amp;quot;,
            &amp;quot;key encipherment&amp;quot;,
            &amp;quot;server auth&amp;quot;,
            &amp;quot;client auth&amp;quot;
        ],
        &amp;quot;expiry&amp;quot;: &amp;quot;87600h&amp;quot;
      }
    }
  }
}
EOF

cat&amp;gt;&amp;gt;ca-csr.json&amp;lt;&amp;lt;-EOF
{
  &amp;quot;CN&amp;quot;: &amp;quot;kubernetes&amp;quot;,
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;ShangHai&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;ShangHai&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ],
    &amp;quot;ca&amp;quot;: {
       &amp;quot;expiry&amp;quot;: &amp;quot;87600h&amp;quot;
    }
}
EOF

cfssl gencert -initca ca-csr.json | cfssljson -bare ca
ls ca*
# ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem

cat&amp;gt;kubernetes-csr.json&amp;lt;&amp;lt;-EOF
{
    &amp;quot;CN&amp;quot;: &amp;quot;kubernetes&amp;quot;,
    &amp;quot;hosts&amp;quot;: [
      &amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;15.119.88.180&amp;quot;,
      &amp;quot;15.119.88.181&amp;quot;,
      &amp;quot;15.119.88.182&amp;quot;,
      &amp;quot;10.254.0.1&amp;quot;,
      &amp;quot;kubernetes&amp;quot;,
      &amp;quot;kubernetes.default&amp;quot;,
      &amp;quot;kubernetes.default.svc&amp;quot;,
      &amp;quot;kubernetes.default.svc.cluster&amp;quot;,
      &amp;quot;kubernetes.default.svc.cluster.local&amp;quot;
    ],
    &amp;quot;key&amp;quot;: {
        &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
        &amp;quot;size&amp;quot;: 2048
    },
    &amp;quot;names&amp;quot;: [
        {
            &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
            &amp;quot;ST&amp;quot;: &amp;quot;ShangHai&amp;quot;,
            &amp;quot;L&amp;quot;: &amp;quot;ShangHai&amp;quot;,
            &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
            &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
        }
    ]
}
EOF


cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
ls kubernetes*

cat&amp;gt;&amp;gt;admin-csr.json&amp;lt;&amp;lt;-EOF
{
  &amp;quot;CN&amp;quot;: &amp;quot;admin&amp;quot;,
  &amp;quot;hosts&amp;quot;: [],
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;ShangHai&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;ShangHai&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;system:masters&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ]
}
EOF


cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin

cat&amp;gt;kube-proxy-csr.json&amp;lt;&amp;lt;-EOF
{
  &amp;quot;CN&amp;quot;: &amp;quot;system:kube-proxy&amp;quot;,
  &amp;quot;hosts&amp;quot;: [],
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;ShangHai&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;Shanghai&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ]
}
EOF

cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy
ls kube-proxy*

openssl x509  -noout -text -in  kubernetes.pem
cfssl-certinfo -cert kubernetes.pem

mkdir -p /etc/kubernetes/ssl
cp *.pem /etc/kubernetes/ssl

cd /root/all-file

curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.11.2/bin/linux/amd64/kubectl
cp kubectl /usr/bin/
chmod a+x /usr/bin/kube*

export KUBE_APISERVER=&amp;quot;https://15.119.88.180:6443&amp;quot;

echo $KUBE_APISERVER

kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER}

kubectl config set-credentials admin \
  --client-certificate=/etc/kubernetes/ssl/admin.pem \
  --embed-certs=true \
  --client-key=/etc/kubernetes/ssl/admin-key.pem

kubectl config set-context kubernetes \
  --cluster=kubernetes \
  --user=admin

kubectl config use-context kubernetes

cd /root/ssl

export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d &#39; &#39;)
cat &amp;gt; token.csv &amp;lt;&amp;lt;EOF
${BOOTSTRAP_TOKEN},kubelet-bootstrap,10001,&amp;quot;system:kubelet-bootstrap&amp;quot;
EOF

cat token.csv
cp /root/ssl/token.csv /etc/kubernetes/

cd /etc/kubernetes
export KUBE_APISERVER=&amp;quot;https://15.119.88.180:6443&amp;quot;

kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER} \
  --kubeconfig=bootstrap.kubeconfig

kubectl config set-credentials kubelet-bootstrap \
  --token=${BOOTSTRAP_TOKEN} \
  --kubeconfig=bootstrap.kubeconfig

kubectl config set-context default \
  --cluster=kubernetes \
  --user=kubelet-bootstrap \
  --kubeconfig=bootstrap.kubeconfig

kubectl config use-context default --kubeconfig=bootstrap.kubeconfig


export KUBE_APISERVER=&amp;quot;https://15.119.88.180:6443&amp;quot;

kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER} \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config set-credentials kube-proxy \
  --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \
  --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \
  --embed-certs=true \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config set-context default \
  --cluster=kubernetes \
  --user=kube-proxy \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig



# 各个节点上的/etc/kubernetes/要保持同步
# sftp root@shc-sma-cd180.hpeswlab.net
# get -r /etc/kubernetes/ /etc/kubernetes/
# 上面的操作就只是在master节点上操作，在node节点上只要把这些证书拷过去


cd /root/all-file

curl https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz -LO
tar -xvf etcd-v3.3.9-linux-amd64.tar.gz
mv etcd-v3.3.9-linux-amd64/etcd* /usr/local/bin

mkdir /var/lib/etcd
mkdir /etc/etcd

vim /usr/lib/systemd/system/etcd.service

[Unit]
Description=Etcd Server
After=network.target
After=network-online.target
Wants=network-online.target
Documentation=https://github.com/coreos

[Service]
Type=notify
WorkingDirectory=/var/lib/etcd/
EnvironmentFile=-/etc/etcd/etcd.conf
ExecStart=/usr/local/bin/etcd \
  --name ${ETCD_NAME} \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  --peer-cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --peer-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \
  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \
  --initial-advertise-peer-urls ${ETCD_INITIAL_ADVERTISE_PEER_URLS} \
  --listen-peer-urls ${ETCD_LISTEN_PEER_URLS} \
  --listen-client-urls ${ETCD_LISTEN_CLIENT_URLS},http://127.0.0.1:2379 \
  --advertise-client-urls ${ETCD_ADVERTISE_CLIENT_URLS} \
  --initial-cluster-token ${ETCD_INITIAL_CLUSTER_TOKEN} \
  --initial-cluster infra1=https://15.119.88.180:2380,infra2=https://15.119.88.181:2380,infra3=https://15.119.88.182:2380 \
  --initial-cluster-state new \
  --data-dir=${ETCD_DATA_DIR}
Restart=on-failure
RestartSec=5
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

cat&amp;gt;/etc/etcd/etcd.conf&amp;lt;&amp;lt;-EOF
# [member]
ETCD_NAME=infra1
ETCD_DATA_DIR=&amp;quot;/var/lib/etcd&amp;quot;
ETCD_LISTEN_PEER_URLS=&amp;quot;https://15.119.88.180:2380&amp;quot;
ETCD_LISTEN_CLIENT_URLS=&amp;quot;https://15.119.88.180:2379&amp;quot;

#[cluster]
ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;https://15.119.88.180:2380&amp;quot;
ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;etcd-cluster&amp;quot;
ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;https://15.119.88.180:2379&amp;quot;
EOF

# ==============

mkdir /etc/etcd
cat&amp;gt;/etc/etcd/etcd.conf&amp;lt;&amp;lt;-EOF
# [member]
ETCD_NAME=infra2
ETCD_DATA_DIR=&amp;quot;/var/lib/etcd&amp;quot;
ETCD_LISTEN_PEER_URLS=&amp;quot;https://15.119.88.181:2380&amp;quot;
ETCD_LISTEN_CLIENT_URLS=&amp;quot;https://15.119.88.181:2379&amp;quot;

#[cluster]
ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;https://15.119.88.181:2380&amp;quot;
ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;etcd-cluster&amp;quot;
ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;https://15.119.88.181:2379&amp;quot;
EOF

mkdir /etc/etcd
cat&amp;gt;/etc/etcd/etcd.conf&amp;lt;&amp;lt;-EOF
# [member]
ETCD_NAME=infra3
ETCD_DATA_DIR=&amp;quot;/var/lib/etcd&amp;quot;
ETCD_LISTEN_PEER_URLS=&amp;quot;https://15.119.88.182:2380&amp;quot;
ETCD_LISTEN_CLIENT_URLS=&amp;quot;https://15.119.88.182:2379&amp;quot;

#[cluster]
ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;https://15.119.88.182:2380&amp;quot;
ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;etcd-cluster&amp;quot;
ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;https://15.119.88.182:2379&amp;quot;
EOF


# =========================

systemctl daemon-reload
systemctl enable etcd
systemctl start etcd
systemctl status etcd

etcdctl \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  cluster-health

 显示最后一行cluster is healthy etcd 就安装成功


cd /root/all-file

curl https://github.com/kubernetes/kubernetes/releases/download/v1.11.2/kubernetes.tar.gz -OL
tar -xzvf kubernetes.tar.gz
cd kubernetes
./cluster/get-kube-binaries.sh
cd server
tar -xzvf kubernetes-server-linux-amd64.tar.gz
cd kubernetes
tar -xzvf  kubernetes-src.tar.gz
cp -r server/bin/{kube-apiserver,kube-controller-manager,kube-scheduler,kubectl,kube-proxy,kubelet} /usr/local/bin/

cat&amp;gt;/etc/kubernetes/config&amp;lt;&amp;lt;-EOF
###
# kubernetes system config
#
# The following values are used to configure various aspects of all
# kubernetes services, including
#
#   kube-apiserver.service
#   kube-controller-manager.service
#   kube-scheduler.service
#   kubelet.service
#   kube-proxy.service
# logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR=&amp;quot;--logtostderr=true&amp;quot;

# journal message level, 0 is debug
KUBE_LOG_LEVEL=&amp;quot;--v=0&amp;quot;

# Should this cluster be allowed to run privileged docker containers
KUBE_ALLOW_PRIV=&amp;quot;--allow-privileged=true&amp;quot;

# How the controller-manager, scheduler, and proxy find the apiserver
#KUBE_MASTER=&amp;quot;--master=http://shc-sma-cd180.hpeswlab.net&amp;quot;
KUBE_MASTER=&amp;quot;--master=http://15.119.88.180:8080&amp;quot;
EOF

vim /usr/lib/systemd/system/kube-apiserver.service

[Unit]
Description=Kubernetes API Service
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target
After=etcd.service

[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/apiserver
ExecStart=/usr/local/bin/kube-apiserver \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBE_ETCD_SERVERS \
        $KUBE_API_ADDRESS \
        $KUBE_API_PORT \
        $KUBELET_PORT \
        $KUBE_ALLOW_PRIV \
        $KUBE_SERVICE_ADDRESSES \
        $KUBE_ADMISSION_CONTROL \
        $KUBE_API_ARGS
Restart=on-failure
Type=notify
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target


cat&amp;gt;/etc/kubernetes/apiserver&amp;lt;&amp;lt;-EOF
###
## kubernetes system config
##
## The following values are used to configure the kube-apiserver
##
#
## The address on the local server to listen to.
#KUBE_API_ADDRESS=&amp;quot;--insecure-bind-address=shc-sma-cd180.hpeswlab.net&amp;quot;
KUBE_API_ADDRESS=&amp;quot;--advertise-address=15.119.88.180 --bind-address=15.119.88.180 --insecure-bind-address=15.119.88.180&amp;quot;
#
## The port on the local server to listen on.
#KUBE_API_PORT=&amp;quot;--port=8080&amp;quot;
#
## Port minions listen on
#KUBELET_PORT=&amp;quot;--kubelet-port=10250&amp;quot;
#
## Comma separated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS=&amp;quot;--etcd-servers=https://15.119.88.180:2379,https://15.119.88.181:2379,https://15.119.88.182:2379&amp;quot;
#
## Address range to use for services
KUBE_SERVICE_ADDRESSES=&amp;quot;--service-cluster-ip-range=10.254.0.0/16&amp;quot;
#
## default admission control policies
KUBE_ADMISSION_CONTROL=&amp;quot;--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota&amp;quot;
#
## Add your own!
KUBE_API_ARGS=&amp;quot;--authorization-mode=Node,RBAC --runtime-config=rbac.authorization.k8s.io/v1beta1 --kubelet-https=true --enable-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --enable-swagger-ui=true --apiserver-count=3 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h&amp;quot;
EOF

systemctl daemon-reload
systemctl enable kube-apiserver
systemctl start kube-apiserver
systemctl status kube-apiserver

cat&amp;gt;/etc/kubernetes/controller-manager&amp;lt;&amp;lt;-EOF
###
# The following values are used to configure the kubernetes controller-manager

# defaults from config and apiserver should be adequate

# Add your own!
KUBE_CONTROLLER_MANAGER_ARGS=&amp;quot;--address=127.0.0.1 --service-cluster-ip-range=10.254.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem --root-ca-file=/etc/kubernetes/ssl/ca.pem --leader-elect=true&amp;quot;
EOF

vim /usr/lib/systemd/system/kube-controller-manager.service

[Unit]
Description=Kubernetes Controller Manager
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/controller-manager
ExecStart=/usr/local/bin/kube-controller-manager \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBE_MASTER \
        $KUBE_CONTROLLER_MANAGER_ARGS
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target


systemctl daemon-reload
systemctl enable kube-controller-manager
systemctl start kube-controller-manager
systemctl status kube-controller-manager


cat&amp;gt;/etc/kubernetes/scheduler&amp;lt;&amp;lt;-EOF
###
# kubernetes scheduler config

# default config should be adequate

# Add your own!
KUBE_SCHEDULER_ARGS=&amp;quot;--leader-elect=true --address=127.0.0.1&amp;quot;
EOF


vim /usr/lib/systemd/system/kube-scheduler.service

[Unit]
Description=Kubernetes Scheduler Plugin
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/scheduler
ExecStart=/usr/local/bin/kube-scheduler \
            $KUBE_LOGTOSTDERR \
            $KUBE_LOG_LEVEL \
            $KUBE_MASTER \
            $KUBE_SCHEDULER_ARGS
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

systemctl daemon-reload
systemctl enable kube-scheduler
systemctl start kube-scheduler
systemctl status kube-scheduler

========================
kubectl get componentstatuses


============install flannel=========

yum install -y flannel

vim /usr/lib/systemd/system/flanneld.service

[Unit]
Description=Flanneld overlay address etcd agent
After=network.target
After=network-online.target
Wants=network-online.target
After=etcd.service
Before=docker.service

[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/flanneld
EnvironmentFile=-/etc/sysconfig/docker-network
ExecStart=/usr/bin/flanneld-start \
  -etcd-endpoints=${FLANNEL_ETCD_ENDPOINTS} \
  -etcd-prefix=${FLANNEL_ETCD_PREFIX} \
  $FLANNEL_OPTIONS
ExecStartPost=/usr/libexec/flannel/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker
Restart=on-failure

[Install]
WantedBy=multi-user.target

RequiredBy=docker.service

cat&amp;gt;/etc/sysconfig/flanneld&amp;lt;&amp;lt;-EOF
# Flanneld configuration options  

# etcd url location.  Point this to the server where etcd runs
FLANNEL_ETCD_ENDPOINTS=&amp;quot;https://15.119.88.180:2379,https://15.119.88.181:2379,https://15.119.88.182:2379&amp;quot;

# etcd config key.  This is the configuration key that flannel queries
# For address range assignment
FLANNEL_ETCD_PREFIX=&amp;quot;/kube-centos/network&amp;quot;

# Any additional options that you want to pass
FLANNEL_OPTIONS=&amp;quot;-etcd-cafile=/etc/kubernetes/ssl/ca.pem -etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem -etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem&amp;quot;
EOF

cat /usr/lib/systemd/system/flanneld.service


etcdctl --endpoints=https://15.119.88.180:2379,https://15.119.88.181:2379,https://15.119.88.182:2379 \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  mkdir /kube-centos/network
etcdctl --endpoints=https://15.119.88.180:2379,https://15.119.88.181:2379,https://15.119.88.182:2379 \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  mk /kube-centos/network/config &#39;{&amp;quot;Network&amp;quot;:&amp;quot;172.30.0.0/16&amp;quot;,&amp;quot;SubnetLen&amp;quot;:24,&amp;quot;Backend&amp;quot;:{&amp;quot;Type&amp;quot;:&amp;quot;vxlan&amp;quot;}}&#39;

systemctl daemon-reload
systemctl enable flanneld
systemctl start flanneld
systemctl status flanneld


check：

etcdctl --endpoints=${ETCD_ENDPOINTS} \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  ls /kube-centos/network/subnets
/kube-centos/network/subnets/172.30.14.0-24
/kube-centos/network/subnets/172.30.38.0-24
/kube-centos/network/subnets/172.30.46.0-24

etcdctl --endpoints=${ETCD_ENDPOINTS} \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  get /kube-centos/network/config
{ &amp;quot;Network&amp;quot;: &amp;quot;172.30.0.0/16&amp;quot;, &amp;quot;SubnetLen&amp;quot;: 24, &amp;quot;Backend&amp;quot;: { &amp;quot;Type&amp;quot;: &amp;quot;vxlan&amp;quot; } }

etcdctl --endpoints=${ETCD_ENDPOINTS} \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  get /kube-centos/network/subnets/172.30.14.0-24
{&amp;quot;PublicIP&amp;quot;:&amp;quot;172.20.0.114&amp;quot;,&amp;quot;BackendType&amp;quot;:&amp;quot;vxlan&amp;quot;,&amp;quot;BackendData&amp;quot;:{&amp;quot;VtepMAC&amp;quot;:&amp;quot;56:27:7d:1c:08:22&amp;quot;}}

etcdctl --endpoints=${ETCD_ENDPOINTS} \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  get /kube-centos/network/subnets/172.30.38.0-24
{&amp;quot;PublicIP&amp;quot;:&amp;quot;172.20.0.115&amp;quot;,&amp;quot;BackendType&amp;quot;:&amp;quot;vxlan&amp;quot;,&amp;quot;BackendData&amp;quot;:{&amp;quot;VtepMAC&amp;quot;:&amp;quot;12:82:83:59:cf:b8&amp;quot;}}

etcdctl --endpoints=${ETCD_ENDPOINTS} \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  get /kube-centos/network/subnets/172.30.46.0-24
{&amp;quot;PublicIP&amp;quot;:&amp;quot;172.20.0.113&amp;quot;,&amp;quot;BackendType&amp;quot;:&amp;quot;vxlan&amp;quot;,&amp;quot;BackendData&amp;quot;:{&amp;quot;VtepMAC&amp;quot;:&amp;quot;e6:b2:fd:f6:66:96&amp;quot;}}


ls /etc/kubernetes/ssl
# admin-key.pem  admin.pem  ca-key.pem  ca.pem  kube-proxy-key.pem  kube-proxy.pem  kubernetes-key.pem  kubernetes.pem
ls /etc/kubernetes/
# apiserver  bootstrap.kubeconfig  config  controller-manager  kubelet  kube-proxy.kubeconfig  proxy  scheduler  ssl  token.csv


vim /usr/lib/systemd/system/docker.service

# add below under [service]

EnvironmentFile=-/run/flannel/docker
EnvironmentFile=-/run/docker_opts.env
EnvironmentFile=-/run/flannel/subnet.env
EnvironmentFile=-/etc/sysconfig/docker
EnvironmentFile=-/etc/sysconfig/docker-storage
EnvironmentFile=-/etc/sysconfig/docker-network
EnvironmentFile=-/run/docker_opts.env

ExecStart=/usr/bin/dockerd \
    --exec-opt native.cgroupdriver=systemd

systemctl daemon-reload
systemctl restart docker

cd /etc/kubernetes
kubectl create clusterrolebinding kubelet-bootstrap \
  --clusterrole=system:node-bootstrapper \
  --user=kubelet-bootstrap

# download kubelet and move to /usr/local/bin
# master上面在安装kubectl的时候就已经cp过去了,node节点参照master节点
# master 上面需要创建kubelet and kube-proxy service
# node上面还需下载kube client

curl 

# config kubelet

mkdir -p /var/lib/kubelet

vim /usr/lib/systemd/system/kubelet.service

[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/kubelet
ExecStart=/usr/local/bin/kubelet \
            $KUBE_LOGTOSTDERR \
            $KUBE_LOG_LEVEL \
            $KUBELET_API_SERVER \
            $KUBELET_ADDRESS \
            $KUBELET_PORT \
            $KUBELET_HOSTNAME \
            $KUBE_ALLOW_PRIV \
            $KUBELET_POD_INFRA_CONTAINER \
            $KUBELET_ARGS
Restart=on-failure

[Install]
WantedBy=multi-user.target


cat&amp;gt;/etc/kubernetes/kubelet&amp;lt;&amp;lt;-EOF
###
## kubernetes kubelet (minion) config
#
## The address for the info server to serve on (set to 0.0.0.0 or &amp;quot;&amp;quot; for all interfaces)
KUBELET_ADDRESS=&amp;quot;--address=15.119.88.180&amp;quot;
#
## The port for the info server to serve on
#KUBELET_PORT=&amp;quot;--port=10250&amp;quot;
#
## You may leave this blank to use the actual hostname
KUBELET_HOSTNAME=&amp;quot;--hostname-override=15.119.88.180&amp;quot;
#
## location of the api-server
## COMMENT THIS ON KUBERNETES 1.8+
# KUBELET_API_SERVER=&amp;quot;--api-servers=http://15.119.88.180:8080&amp;quot;
#
## pod infrastructure container
KUBELET_POD_INFRA_CONTAINER=&amp;quot;--pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&amp;quot;
#
## Add your own!
KUBELET_ARGS=&amp;quot;--cgroup-driver=systemd --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice --cluster-dns=10.254.0.2 --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --cert-dir=/etc/kubernetes/ssl --cluster-domain=cluster.local --hairpin-mode promiscuous-bridge --serialize-image-pulls=false&amp;quot;
EOF


cat&amp;gt;/etc/kubernetes/kubelet&amp;lt;&amp;lt;-EOF
###
## kubernetes kubelet (minion) config
#
## The address for the info server to serve on (set to 0.0.0.0 or &amp;quot;&amp;quot; for all interfaces)
KUBELET_ADDRESS=&amp;quot;--address=15.119.88.181&amp;quot;
#
## The port for the info server to serve on
#KUBELET_PORT=&amp;quot;--port=10250&amp;quot;
#
## You may leave this blank to use the actual hostname
KUBELET_HOSTNAME=&amp;quot;--hostname-override=15.119.88.181&amp;quot;
#
## location of the api-server
## COMMENT THIS ON KUBERNETES 1.8+
# KUBELET_API_SERVER=&amp;quot;--api-servers=http://15.119.88.181:8080&amp;quot;
#
## pod infrastructure container
KUBELET_POD_INFRA_CONTAINER=&amp;quot;--pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&amp;quot;
#
## Add your own!
KUBELET_ARGS=&amp;quot;--cgroup-driver=systemd --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice --cluster-dns=10.254.0.2 --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --cert-dir=/etc/kubernetes/ssl --cluster-domain=cluster.local --hairpin-mode promiscuous-bridge --serialize-image-pulls=false&amp;quot;
EOF

==============
cat&amp;gt;/etc/kubernetes/kubelet&amp;lt;&amp;lt;-EOF
###
## kubernetes kubelet (minion) config
#
## The address for the info server to serve on (set to 0.0.0.0 or &amp;quot;&amp;quot; for all interfaces)
KUBELET_ADDRESS=&amp;quot;--address=15.119.88.182&amp;quot;
#
## The port for the info server to serve on
#KUBELET_PORT=&amp;quot;--port=10250&amp;quot;
#
## You may leave this blank to use the actual hostname
KUBELET_HOSTNAME=&amp;quot;--hostname-override=15.119.88.182&amp;quot;
#
## location of the api-server
## COMMENT THIS ON KUBERNETES 1.8+
# KUBELET_API_SERVER=&amp;quot;--api-servers=http://15.119.88.182:8080&amp;quot;
#
## pod infrastructure container
KUBELET_POD_INFRA_CONTAINER=&amp;quot;--pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&amp;quot;
#
## Add your own!
KUBELET_ARGS=&amp;quot;--cgroup-driver=systemd --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice --cluster-dns=10.254.0.2 --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --cert-dir=/etc/kubernetes/ssl --cluster-domain=cluster.local --hairpin-mode promiscuous-bridge --serialize-image-pulls=false&amp;quot;
EOF

scp root@shc-sma-cd180.hpeswlab.net:/etc/kubernetes/kubelet.kubeconfig /etc/kubernetes/kubelet.kubeconfig
# master 上的kubelet.kubeconfig是~/.kube/config 
 # cp ~/.kube/config /etc/kubernetes/kubelet.kubeconfig

systemctl daemon-reload
systemctl enable kubelet
systemctl start kubelet
systemctl status kubelet



vim /usr/lib/systemd/system/kube-proxy.service

[Unit]
Description=Kubernetes Kube-Proxy Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target

[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/proxy
ExecStart=/usr/local/bin/kube-proxy \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBE_MASTER \
        $KUBE_PROXY_ARGS
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

cat&amp;gt;/etc/kubernetes/proxy&amp;lt;&amp;lt;-EOF
###
# kubernetes proxy config

# default config should be adequate

# Add your own!
KUBE_PROXY_ARGS=&amp;quot;--bind-address=15.119.88.180 --hostname-override=15.119.88.180 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16&amp;quot;
EOF

============
cat&amp;gt;/etc/kubernetes/proxy&amp;lt;&amp;lt;-EOF
###
# kubernetes proxy config

# default config should be adequate

# Add your own!
KUBE_PROXY_ARGS=&amp;quot;--bind-address=15.119.88.181 --hostname-override=15.119.88.181 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16&amp;quot;
EOF

===============
cat&amp;gt;/etc/kubernetes/proxy&amp;lt;&amp;lt;-EOF
###
# kubernetes proxy config

# default config should be adequate

# Add your own!
KUBE_PROXY_ARGS=&amp;quot;--bind-address=15.119.88.182 --hostname-override=15.119.88.182 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16&amp;quot;
EOF

systemctl daemon-reload
systemctl enable kube-proxy
systemctl start kube-proxy
systemctl status kube-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Style</title>
      <link>https://leiheng.github.io/posts/java/code-style/</link>
      <pubDate>Thu, 01 Aug 2019 19:25:47 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/code-style/</guid>
      <description>

&lt;h2 id=&#34;到-resource-文件夹里面拿文件&#34;&gt;到 resource 文件夹里面拿文件&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String response = Resources.toString(Resources.getResource(&amp;quot;response.json&amp;quot;), Charsets.UTF_8);
// bytes:
Resources.asByteSource(Resources.getResource(&amp;quot;datain_100000.log&amp;quot;).toURI().toURL()).openBufferedStream();

// Guava:
  public static URL getResource(String resourceName) {
    ClassLoader loader =
        MoreObjects.firstNonNull(
            Thread.currentThread().getContextClassLoader(), Resources.class.getClassLoader());
    URL url = loader.getResource(resourceName);
    checkArgument(url != null, &amp;quot;resource %s not found.&amp;quot;, resourceName);
    return url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-env-in-springboot&#34;&gt;get env in SpringBoot&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;// define properties in application.yaml like:
project:
  service:
    name: smarta-installer
    feature:
      mgmt:
        job-setting:
          job-retry-time: ${JOB_RETRY_TIME:100}
          job-interval-time: ${JOB_INTERVAL_TIME:60}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, create Bean:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Data
@ConfigurationProperties(prefix = &amp;quot;project.service.feature.mgmt&amp;quot;)
public class AppConfigProperties {
	private ScaleJobSetting JobSetting;

	@Data
	public static class JobSetting {
		private long jobRetryTime = 100;
		private long jobIntervalTime = 60;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now, have fun.&lt;/p&gt;

&lt;h2 id=&#34;try-with-resource&#34;&gt;try with resource&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;能&lt;code&gt;try with resource&lt;/code&gt;的类必须继承&lt;code&gt;AutoCloseable&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;流式处理I/O&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void queryEncode2() throws Exception {
   AciServerDetails aciServerDetails = getServerDetails(Constants.idolHost, Constants.idolQueryPort, Constants.idolOemKey);
   try (
           InputStream inputStream = Resources.asByteSource(Resources.getResource(&amp;quot;datain_100000.log&amp;quot;).toURI().toURL()).openBufferedStream();
           BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
           OutputStream outputStream = Files.asByteSink(new File(&amp;quot;output/querys.txt&amp;quot;)).openBufferedStream();
   ) {
     Flux.fromStream(bufferedReader.lines())
             .subscribe( query -&amp;gt; {
                       try {
                         log.info(&amp;quot;query is, {}&amp;quot;, query);
                         outputStream.write(SimpleQuery.encode(aciServerDetails, query).getBytes());
                         outputStream.write(&amp;quot;\n&amp;quot;.getBytes());
                       } catch (Exception e) {
                         log.info(&amp;quot;error query is, {}&amp;quot;, query);
                         log.error(&amp;quot;&amp;quot;, e);
                       }
                     }
             );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt; vertx.fileSytem()&lt;/p&gt;

&lt;h3 id=&#34;refer&#34;&gt;refer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;java-string-immutable&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;java-string-immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/java-immutable-object&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;java-immutable-object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;java-string-pool&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;java-string-pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Https for Harbor</title>
      <link>https://leiheng.github.io/posts/docker/https-for-harbor/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leiheng.github.io/posts/docker/https-for-harbor/</guid>
      <description>

&lt;h2 id=&#34;https&#34;&gt;https&lt;/h2&gt;

&lt;p&gt;Exercise install Harbor and configure https.&lt;/p&gt;

&lt;h3 id=&#34;prepare&#34;&gt;prepare&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;install docker by get-docker script.&lt;/li&gt;
&lt;li&gt;install compose by compose github install wiki&lt;/li&gt;
&lt;li&gt;install harbor by harbor wiki&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;lets-getting-ca&#34;&gt;lets getting CA&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir /data/harbor-cert &amp;amp; cd /data/harbor-cert&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;generate CA key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genrsa -out ca.key 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CA crt&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl req -x509 -new -nodes -sha512 -days 3650 \
-subj &amp;quot;/CN=yourdomain.com&amp;quot; \
-key ca.key \
-out ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;lets-getting-server-certificate&#34;&gt;lets getting server certificate&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;server key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genrsa -out yourdomain.com.key 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a Certificate Signing request&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl req -sha512 -new \
-subj &amp;quot;/CN=yourdomain.com&amp;quot; \
-key yourdomain.com.key \
-out yourdomain.com.csr 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate Certificate for Harbor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt; v3.ext &amp;lt;&amp;lt;-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth 
subjectAltName = @alt_names
[alt_names]
DNS.1=yourdomain.com
DNS.2=yourdomain
DNS.3=hostname
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl x509 -req -sha512 -days 3650 \
-extfile v3.ext \
-CA ca.crt -CAkey ca.key -CAcreateserial \
-in yourdomain.com.csr \
-out yourdomain.com.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;configure-harbor&#34;&gt;configure Harbor&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Convert server yourdomain.com.crt to yourdomain.com.cert:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delpoy yourdomain.com.cert, yourdomain.com.key, and ca.crt for Docker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# if /etc/docker/certs.d/yourdomain.com/ not exist, mkdir.
cp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/
cp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/
cp ca.crt /etc/docker/certs.d/yourdomain.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following illustrates a configuration with custom certificates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/etc/docker/certs.d/
└── yourdomain.com:port   
   ├── yourdomain.com.cert  &amp;lt;-- Server certificate signed by CA
   ├── yourdomain.com.key   &amp;lt;-- Server key signed by CA
   └── ca.crt               &amp;lt;-- Certificate authority that signed the registry certificate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit harbor.yml, add certificate, harbor.yml should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#set hostnamehostname: yourdomain.com
http:
port: 80
https:
# https port for harbor, default is 443
port: 443
# The path of cert and key files for nginx
certificate: /data/cert/yourdomain.com.crt
private_key: /data/cert/yourdomain.com.key
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate configuration files for Harbor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose down -v # if harbor is running, down first, then run prepare script
./prepare
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Valid https&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open browser, and open &lt;code&gt;https://yourdomain.com&lt;/code&gt;, see the harbor login page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;docker login yourdomain.com&lt;/code&gt;  should success.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ts&#34;&gt;TS&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;if use chrome open harbor, may have a &lt;strong&gt;NET::ERR_CERT_INVALID&lt;/strong&gt;. It is Chrome&amp;rsquo;s bug when visiting numerous top sites. Our self-signing certificate belonging this &lt;code&gt;numerous&lt;/code&gt; category. So, open harbor with firefox.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if your docker has &lt;code&gt;Insecure Registries&lt;/code&gt; (you can see it by &lt;code&gt;docker ifno&lt;/code&gt;), add the harbor registry:(Centos7)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;-EOF
{
&amp;quot;insecure-registries&amp;quot; : [ &amp;quot;SGDLITVM0531.hpeswlab.net&amp;quot; ]
}
EOF
# then restart docker
systemctl daemon-reload
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I still dont know how to add insecure registry into docker on windos. I have tried install &lt;code&gt;ca.crt&lt;/code&gt;&amp;amp;&lt;code&gt;harbor.crt&lt;/code&gt; into &lt;code&gt;Trusted Root Certification&lt;/code&gt; and restart computer, still cannot connect the harbor.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;refer&#34;&gt;Refer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://get.docker.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;get-docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/config/daemon/systemd/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;docker set proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/compose/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;compose wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;harbor install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://appuals.com/fix-google-chrome-error-neterr_cert_invalid/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Chrome&amp;rsquo;s ssl bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/42211380/add-insecure-registry-to-docker&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;docker insecure registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/registry/insecure/#windows&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Windows docker insecure registry but failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Note</title>
      <link>https://leiheng.github.io/posts/tools/git-note/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leiheng.github.io/posts/tools/git-note/</guid>
      <description>

&lt;h2 id=&#34;add-git&#34;&gt;Add git&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;创建并添加ssh key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &amp;quot;leiheng&amp;quot;
git config --global user.email &amp;quot;heng.lei@hpe.com&amp;quot;
ssh-keygen -t rsa -C &amp;quot;heng.lei@hpe.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果要在电脑上添加自己的github accout，refer &lt;a href=&#34;https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-add error&lt;/code&gt; refer &lt;a href=&#34;https://unix.stackexchange.com/questions/48863/ssh-add-complains-could-not-open-a-connection-to-your-authentication-agent/48868#48868&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;final: &lt;code&gt;git clone git@git-personal:leiheng\repo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;final: &lt;code&gt;git clone git@github.com:leiheng\repo&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;配置了-gitignore-但是并没有起作用&#34;&gt;配置了&lt;code&gt;.gitignore&lt;/code&gt;但是并没有起作用&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;method:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rm --cached *.class
git commit -m &amp;quot;add gitignore file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;good-habit&#34;&gt;Good Habit&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;本地新建分支，然后merge到master上去，用master作为提pr的branch&lt;/li&gt;
&lt;li&gt;&lt;del&gt;开始写代码之前rebase代码&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;rebase before or after change does not matter, the point is, do not rebase branch which other guys or other mechine working on it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在add之前，看status&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在add之前，看diff &lt;code&gt;git diff&lt;/code&gt; 最好看diff是用&lt;strong&gt;source tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注意&lt;strong&gt;编码&lt;/strong&gt;；github上是LF，win上是CRLF &lt;strong&gt;坑注意&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;can use &lt;code&gt;git option --help&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rebase&#34;&gt;Rebase&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream
//rebase branch which you want, most is default branch
// Do not rebase branch which other guy work on it
git rebase upstream/master
...
//if not use rebase, use pull also a good choice but cause a merge node created
git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commit相关&#34;&gt;Commit相关&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;前提&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;多个commit合并成一个commit(这些&amp;rsquo;多个commit&amp;rsquo;指只做一件事的commit)&lt;/li&gt;
&lt;li&gt;pr 尽可能的细&lt;/li&gt;
&lt;li&gt;一个pr，一个分支只能做一件事&lt;/li&gt;
&lt;li&gt;file change 最好不要超过10个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit --amend --no-edit&lt;/code&gt; 补提交，但不增加commit 节点 &lt;strong&gt;love it&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt; change your commit msg&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git reset 某次commit的id
相当于
git reset --soft HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;拉pr到本地分支&#34;&gt;拉pr到本地分支&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch origin pull/1941/head:repack-org-apache
git checkout repack-org-apache
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;在checkout之前不要手动创建这个&lt;code&gt;repack-org-apache&lt;/code&gt;分支
&lt;a href=&#34;https://www.huangyunkun.com/2018/06/15/pull-github-pr-to-local-branch/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;refer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;git-stash&#34;&gt;git stash&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;li&gt;git stash apply&lt;/li&gt;
&lt;li&gt;git stash pop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;submodule&#34;&gt;Submodule&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;git submodule add url folder&lt;/code&gt;
在一个module里面添加ignore的submodule，顺序是很重要的。
我在其中还看到了empty repo的一些特性。
1. submodule remote repo 不能为空
2. &lt;code&gt;.gitignore&lt;/code&gt; 必须在添加完 submodule 之后才能把这个 folder 添加上去，要是之前就添上去了咋搞，指路&lt;code&gt;git rm --cached&lt;/code&gt;
3. update submodule 指路 &lt;code&gt;git submodule --help&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-de-bug-bisect-https-git-scm-com-book-zh-v1-git-e5-b7-a5-e5-85-b7-e4-bd-bf-e7-94-a8-git-e8-b0-83-e8-af-95&#34;&gt;Git de-bug &lt;em&gt;bisect&lt;/em&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;!!!&lt;/a&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git bisect start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git bisect bad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git bisect good [good commit]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;find it and fixed. use &lt;code&gt;git bisect reset&lt;/code&gt; return the begin&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;remote-repo&#34;&gt;Remote repo&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;remote repo 不能为空, empty repo cannot be created&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;refer&#34;&gt;REFER&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;refer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;git bisect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;submodule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>