<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray&#39;s Blog on Ray&#39;s Blog</title>
    <link>https://leiheng.github.io/</link>
    <description>Recent content in Ray&#39;s Blog on Ray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 10 Oct 2019 15:35:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UT Practice</title>
      <link>https://leiheng.github.io/posts/java/ut-practice/</link>
      <pubDate>Thu, 10 Oct 2019 15:35:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/ut-practice/</guid>
      <description>&lt;p&gt;PowerMock vs Mockito&lt;/p&gt;

&lt;p&gt;只有在mock static method 时候才使用 PowerMock, 其余时间都用Mockito&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Misc</title>
      <link>https://leiheng.github.io/posts/misc/windows-misc/</link>
      <pubDate>Thu, 10 Oct 2019 15:34:24 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/windows-misc/</guid>
      <description>

&lt;h2 id=&#34;nfs-on-windows&#34;&gt;NFS on windows&lt;/h2&gt;

&lt;p&gt;老是跑到一台机器上去看东西,受不了了, 于是在我本机开了个nfs client. 过程还好, 就是后来我一不小心改了一个东西, 重启之后我磁盘锁死了&amp;hellip;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Writing Specification</title>
      <link>https://leiheng.github.io/posts/linux/bash-writing-specification/</link>
      <pubDate>Tue, 24 Sep 2019 17:32:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/bash-writing-specification/</guid>
      <description>&lt;p&gt;Bash 写作的一些规范&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>做工程的一些道理</title>
      <link>https://leiheng.github.io/posts/misc/about-project/</link>
      <pubDate>Mon, 16 Sep 2019 14:00:48 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-project/</guid>
      <description>

&lt;h2 id=&#34;数据模型的构建&#34;&gt;数据模型的构建&lt;/h2&gt;

&lt;p&gt;数据模型非常重要, 一旦数据模型设计不咋, 之后重构就是一团糟&lt;/p&gt;

&lt;h2 id=&#34;论需求和解决方法&#34;&gt;论需求和解决方法&lt;/h2&gt;

&lt;p&gt;PM 提需求就提需求, 解决方案都是rd的事情.&lt;/p&gt;

&lt;h2 id=&#34;论代码分层&#34;&gt;论代码分层&lt;/h2&gt;

&lt;p&gt;Controller 和 service 以及中台 service 分层.
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>StackOverflow Error</title>
      <link>https://leiheng.github.io/posts/java/stackoverflow-error/</link>
      <pubDate>Thu, 12 Sep 2019 11:23:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/stackoverflow-error/</guid>
      <description>

&lt;p&gt;我还没想到我居然能够遇到StackOverflow 这种级别的错.&lt;/p&gt;

&lt;p&gt;先来复习一下什么叫StackOverflow Error.&lt;/p&gt;

&lt;h2 id=&#34;error-review&#34;&gt;ERROR - review&lt;/h2&gt;

&lt;h3 id=&#34;stackoverflow-error&#34;&gt;StackOverflow Error&lt;/h3&gt;

&lt;p&gt;StackOverflow&lt;/p&gt;

&lt;h2 id=&#34;object-to-json&#34;&gt;object to json&lt;/h2&gt;

&lt;h3 id=&#34;fix&#34;&gt;Fix&lt;/h3&gt;

&lt;p&gt;网上看到这种错一般都是用Gson, 一般解决方法就是不让他显示出来&amp;hellip;.这是什么解决方案. 于是我就用jackson, done.
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play!-02</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</link>
      <pubDate>Mon, 09 Sep 2019 18:14:43 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</guid>
      <description>

&lt;h2 id=&#34;get-request-body&#34;&gt;Get request body&lt;/h2&gt;

&lt;p&gt;拿到body 并且转换成dto,而且我再吐槽一句, playframwork的官方guid上写的body 转 dto居然是自己写个annotation去转&amp;hellip;.这不是有毛病吗????&lt;/p&gt;

&lt;p&gt;本来我之前的写法是自己用&lt;code&gt;Json.fromJson()&lt;/code&gt;来转换的, 但是后来发现play自己给我包装了一个, 所以hhhh,就用这个吧.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Optional&amp;lt;Info&amp;gt; optional = request.body().parseJson(Info.class);
    if (!optional.isPresent()) {
      return apiBadRequest(&amp;quot;Cannot create Info&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然我们还有更加装逼式的写法那就是 &lt;code&gt;Maybe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Optional&amp;lt;Info&amp;gt; optional = request.body().parseJson(Info.class);
Maybe.just(optional)
.filter(filter-&amp;gt;optional.isPresent())
.map(op-&amp;gt;op.get())
.switchIfEmpty(Maybe.error(new Exception(&amp;quot;Unable to find.&amp;quot;)))
.map()
.....subscribe()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然这种方式太有侵入性了.而且我现在也&lt;strong&gt;不能确定&lt;/strong&gt;到底这种写法是否符合&lt;strong&gt;play! practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://leiheng.github.io/posts/misc/about-proxy/</link>
      <pubDate>Wed, 21 Aug 2019 10:42:36 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-proxy/</guid>
      <description>

&lt;h2 id=&#34;about-proxy&#34;&gt;About proxy&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;windows 设置 proxy 必须从&lt;strong&gt;环境变量&lt;/strong&gt; 设置, 这里不是说从 &lt;code&gt;powershell/cmd/gitbash&lt;/code&gt; 设置. 并且它可以设置protocol:
&lt;code&gt;HTTPS_PROXY=http://server:port&lt;/code&gt; 这种样式.&lt;/li&gt;
&lt;li&gt;Linux 大家都知道能够设置protocol.&lt;/li&gt;
&lt;li&gt;maven &amp;amp; gradle 必须从 &lt;code&gt;settings.xml/gradle.properties&lt;/code&gt; 中读取 proxy 配置, 且不支持设置 protocol.&lt;/li&gt;
&lt;li&gt;npm &amp;amp; git 支持设置protocol, 且支持disable https.&lt;/li&gt;
&lt;li&gt;sbt 的 proxy首先是读取的 &lt;code&gt;JAVA_OPTS&lt;/code&gt;, 如果里面设置了http, 那么就读这种proxy, 但是, &lt;code&gt;JAVA_OPTS&lt;/code&gt; 不支持设置 protocol.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;所以-如果你的-proxy-不支持https-方式连接-那么酌情混合使用&#34;&gt;所以, 如果你的 proxy 不支持https 方式连接, 那么酌情混合使用.&lt;/h3&gt;

&lt;h4 id=&#34;说一说为啥我的postman总是找不到localhost和-127-0-0-1-吧&#34;&gt;说一说为啥我的postman总是找不到localhost和&lt;code&gt;127.0.0.1&lt;/code&gt;吧&lt;/h4&gt;

&lt;p&gt;这也是配置的问题, 我一直觉得postman用系统proxy是走的那个网络proxy, 就是通过&lt;code&gt;chrome:/settings&lt;/code&gt;找到的那个配置proxy的地方. 但其实不是, 他妈的去找环境变量了, 就是&lt;code&gt;HTTP_PROXY&lt;/code&gt;这个环境变量, 所以, 你还的配置一个 &lt;code&gt;NO_PROXY&lt;/code&gt; 这样的环境变量&amp;hellip;..&lt;/p&gt;

&lt;p&gt;顺便记录一下, postman dev tool 挺好用的, 打开它去看request,还能看到具体的报错信息, 解决postman proxy 的问题就是通过看他具体报错看出来的&amp;hellip;&amp;hellip;..&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grpc 1</title>
      <link>https://leiheng.github.io/posts/rpc/java/grpc-1/</link>
      <pubDate>Thu, 15 Aug 2019 17:11:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/rpc/java/grpc-1/</guid>
      <description>

&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Of course we need clone project from github, now I goto example folder and compile project.&lt;/p&gt;

&lt;p&gt;Ooooooooooooooops! It failed even already behind proxy, so I set proxy i  &lt;code&gt;gradle.properties&lt;/code&gt; at example path. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#http proxy setup
#dont need protocol &amp;quot;http&amp;quot;
systemProp.http.proxyHost=server
systemProp.http.proxyPort=8080

#https proxy setup
#dont need protocol &amp;quot;http&amp;quot;
systemProp.https.proxyHost=server
systemProp.https.proxyPort=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;

&lt;h3 id=&#34;lets-use-akka-grpc-generate-grpc-proto&#34;&gt;lets use akka-grpc generate grpc proto&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maven Dependencies Pom Type</title>
      <link>https://leiheng.github.io/posts/java/maven-dependencies/</link>
      <pubDate>Tue, 13 Aug 2019 17:16:54 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/maven-dependencies/</guid>
      <description>

&lt;p&gt;终于有一天, 我看到我自己 java 练习项目依赖, 配置乱成一坨糟, 心里很糟心, 就打算整理整理整理.&lt;/p&gt;

&lt;p&gt;于是创建了 &lt;code&gt;common-dependency-parent&lt;/code&gt;, 项目结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;.
|-- common-dep
|   `-- pom.xml
|-- pom.xml
`-- shared-pom
    `-- pom.xml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中, &lt;code&gt;shared-pom&lt;/code&gt; 将会作为其他 project 的&lt;strong&gt;parent project&lt;/strong&gt;, 并引用 &lt;code&gt;common-dep&lt;/code&gt; 来 import 常用的 dependencies. install之后, 尝试引用 parent 和 common-dep 失败, 并报错:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;dependencies.dependency.version&amp;rsquo; for com.leih:common-dep:jar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找了大半天, 为啥会去找&lt;code&gt;jar&lt;/code&gt;, 对着 settings.xml 文件找错, &lt;code&gt;offline&lt;/code&gt; 开了又关关了又开, 还是没有找到原因.&lt;/p&gt;

&lt;p&gt;最后, 发现引用 &lt;code&gt;common-dep&lt;/code&gt; 的时候忘记加 &lt;code&gt;&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/code&gt; 了. 如果不显示指定依赖,那么 maven 就会自动认为这个是个 jar 包, 并从local, remote 查找.&lt;/p&gt;

&lt;p&gt;单独拉出一个project 当作依赖项, 内容只有 pom.xml 的时候, 不指定 &lt;code&gt;packaging type&lt;/code&gt; 是 pom 的话, 那么 &lt;code&gt;mvn install&lt;/code&gt; 就会给你生成一个&lt;strong&gt;空的jar包&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;所以, 如果很不幸没有指定 &lt;code&gt;packaging&lt;/code&gt; 并且引用的时候也没有指定 type ,基本上就emmmm.&lt;/p&gt;

&lt;h3 id=&#34;share-pom-pom-xml&#34;&gt;share-pom pom.xml:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;artifactId&amp;gt;shared-pom&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    ...
    &amp;lt;dependencyManagement&amp;gt;
      &amp;lt;dependencies&amp;gt;
      ...
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;com.leih&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;common-dep&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
          &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;your-project-module-pom-xml&#34;&gt;your project module pom.xml:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.leih&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;common-dep&amp;lt;/artifactId&amp;gt;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;common-project-in-github-https-github-com-leiheng-common-dependency-git&#34;&gt;common project in &lt;a href=&#34;https://github.com/leiheng/common-dependency.git&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Odds and Ends</title>
      <link>https://leiheng.github.io/posts/k8s/odds-and-ends/</link>
      <pubDate>Tue, 13 Aug 2019 11:30:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/odds-and-ends/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;terminationGracePeriod&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在05-&amp;gt;08中，nginx从deployment-&amp;gt;daemonset,用k8s的upgrade policy并不起作用。upgrade 的动作是applying新接收到的yaml，出现的状况是创建了一个Daemonset出来但是pod并没有更新(&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/#pod-selector&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;),由于已经存在了一个Daemonset controller选择的pod，Daemonset 认为这个pod就是他创建出来的，但是并没有实际控制pod 所以需要先手动kill pod，但是由于old yaml 中定义了terminationGracePeriod=60，nginx pod会有60sec的时间收尾，60sec之后才会真正的完全清理干净(&lt;a href=&#34;https://youtu.be/Z_l_kE1MDTc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方视频&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use kubeadm install k8s(single master)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taint and toleration&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;我在kubeadm init output中看到了&lt;code&gt;[markmaster] Marking the node shc-sma-cd180.hpeswlab.net as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]&lt;/code&gt;，除了podselect和affinity另外一种调度方式。&lt;code&gt;kubectl describe node nodeName&lt;/code&gt;可以看到taint&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change DNS</title>
      <link>https://leiheng.github.io/posts/hugo/change-dns/</link>
      <pubDate>Thu, 08 Aug 2019 13:20:14 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/change-dns/</guid>
      <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play!-01</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</link>
      <pubDate>Thu, 08 Aug 2019 13:16:32 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</guid>
      <description>

&lt;h2 id=&#34;prepare&#34;&gt;prepare&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;install gradle&lt;/li&gt;
&lt;li&gt;install sbt&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;gradle&#34;&gt;gradle&lt;/h3&gt;

&lt;p&gt;我尝试去使用 gradle 去构建项目, 但是一时半会还没能理解 gradle 里面 plugins 怎么玩的, 遂放弃, 先把 play 玩起来再说.&lt;/p&gt;

&lt;h3 id=&#34;sbt&#34;&gt;sbt&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m new one for playframwork. My intellij cannot import sbt project so that tried to run &lt;code&gt;sbt&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;sbt&lt;/code&gt; at empty folder and get this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Getting org.scala-sbt sbt 1.2.8  (this may take some time)...

:: problems summary ::
:::: WARNINGS
                module not found: org.scala-sbt#sbt;1.2.8

        ==== local: tried

          C:\Users\leih.CORPDOM\.ivy2\local\org.scala-sbt\sbt\1.2.8\ivys\ivy.xml

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          C:\Users\leih.CORPDOM\.ivy2\local\org.scala-sbt\sbt\1.2.8\jars\sbt.jar

        ==== local-preloaded-ivy: tried

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        ==== local-preloaded: tried

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          file:/C:/Users/leih.CORPDOM/.sbt/preloaded/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== Maven Central: tried

          https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== sbt-maven-releases: tried

          https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== sbt-maven-snapshots: tried

          https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

          -- artifact org.scala-sbt#sbt;1.2.8!sbt.jar:

          https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        ==== typesafe-ivy-releases: tried

          https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        ==== sbt-ivy-snapshots: tried

          https://repo.scala-sbt.org/scalasbt/ivy-snapshots/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

                ::::::::::::::::::::::::::::::::::::::::::::::

                ::          UNRESOLVED DEPENDENCIES         ::

                ::::::::::::::::::::::::::::::::::::::::::::::

                :: org.scala-sbt#sbt;1.2.8: not found

                ::::::::::::::::::::::::::::::::::::::::::::::


:::: ERRORS
        Server access Error: Received fatal alert: access_denied url=https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-releases/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.pom

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/maven-snapshots/org/scala-sbt/sbt/1.2.8/sbt-1.2.8.jar

        Server access Error: Received fatal alert: access_denied url=https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml

        Server access Error: Received fatal alert: access_denied url=https://repo.scala-sbt.org/scalasbt/ivy-snapshots/org.scala-sbt/sbt/1.2.8/ivys/ivy.xml


:: USE VERBOSE OR DEBUG MESSAGE LEVEL FOR MORE DETAILS
unresolved dependency: org.scala-sbt#sbt;1.2.8: not found
Error during sbt execution: Error retrieving required libraries
  (see C:\Users\leih.CORPDOM\.sbt\boot\update.log for complete log)
Error: Could not retrieve sbt 1.2.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My java version on win10:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;openjdk version &amp;quot;1.8.0_181&amp;quot;
OpenJDK Runtime Environment (Zulu 8.31.0.1-win64) (build 1.8.0_181-b02)
OpenJDK 64-Bit Server VM (Zulu 8.31.0.1-win64) (build 25.181-b02, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer this &lt;a href=&#34;https://stackoverflow.com/questions/43984715/sbt-error-retrieving-required-libraries&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;answer&lt;/a&gt; to add &lt;code&gt;repositories&lt;/code&gt; at &lt;code&gt;.stb&lt;/code&gt; and re-run &lt;code&gt;sbt&lt;/code&gt;, get maven repo success. But failed when I tried to &lt;code&gt;sbt run&lt;/code&gt; run at &lt;code&gt;hello-world&lt;/code&gt; smaple project:&lt;/p&gt;

&lt;p&gt;repositories is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[repositories]
  local
  sbt-releases-repo: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
  sbt-plugins-repo: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
  maven-central: http://repo1.maven.org/maven2/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Added proxy by:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set JAVA_OPTS=-Dhttp.proxyHost=yourserver -Dhttp.proxyPort=8080&lt;/code&gt;
re run &lt;code&gt;sbt&lt;/code&gt; failed.&lt;/p&gt;

&lt;p&gt;Then added &lt;code&gt;.sbtopts&lt;/code&gt;: &lt;code&gt;-Dsbt.repository.secure=false&lt;/code&gt;, but still failed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  ::          UNRESOLVED DEPENDENCIES         ::
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
...
[warn]  typesafe-ivy-releases: unable to get resource for com.typesafe#npm_2.12;1.2.1: res=https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe/npm_2.12/1.2.1/jars/npm_2.12.jar: javax.net.ssl.SSLHandshakeException: Received fatal alert: access_denied
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]
[warn]  Note: Unresolved dependencies path:
[warn]          org.scala-lang.modules:scala-parser-combinators_2.12:1.1.1
[warn]            +- com.typesafe.sbt:sbt-native-packager:1.3.20 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          org.webjars:webjars-locator-core:0.36
[warn]            +- com.typesafe.sbt:sbt-web:1.4.4 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.sbt:sbt-js-engine:1.2.3 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          com.typesafe.play:twirl-compiler_2.12:1.4.2
[warn]            +- com.typesafe.sbt:sbt-twirl:1.4.2 (scalaVersion=2.12, sbtVersion=1.0)
[warn]            +- com.typesafe.play:sbt-plugin:2.7.3 (scalaVersion=2.12, sbtVersion=1.0) (C:\Users\leih.CORPDOM\Documents\node\Exercise\play-samples-play-java-hello-world-tutorial\project\plugins.sbt#L1-2)
[warn]            +- default:play-samples-play-java-hello-world-tutorial-build:0.1.0-SNAPSHOT (scalaVersion=2.12, sbtVersion=1.0)
[warn]          com.lightbend.play:play-file-watch_2.12:1.1.8
...
[error]         typesafe-ivy-releases: unable to get resource for com.typesafe#npm_2.12;1.2.1: res=https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe/npm_2.12/1.2.1/jars/npm_2.12.jar: javax.net.ssl.SSLHandshakeException: Received fatal alert: access_denied
[error]
[error]         at sbt.internal.librarymanagement.IvyActions$.resolveAndRetrieve(IvyActions.scala:332)
[error]         at sbt.internal.librarymanagement.IvyActions$.$anonfun$updateEither$1(IvyActions.scala:208)
[error]         at sbt.internal.librarymanagement.IvySbt$Module.$anonfun$withModule$1(Ivy.scala:239)
[error]         at sbt.internal.librarymanagement.IvySbt.$anonfun$withIvy$1(Ivy.scala:204)
[error]         at sbt.internal.librarymanagement.IvySbt.sbt$internal$librarymanagement$IvySbt$$action$1(Ivy.scala:70)
[error]         at sbt.internal.librarymanagement.IvySbt$$anon$3.call(Ivy.scala:77)
[error]         at xsbt.boot.Locks$GlobalLock.withChannel$1(Locks.scala:95)
[error]         at xsbt.boot.Locks$GlobalLock.xsbt$boot$Locks$GlobalLock$$withChannelRetries$1(Locks.scala:80)
[error]         at xsbt.boot.Locks$GlobalLock$$anonfun$withFileLock$1.apply(Locks.scala:99)
[error]         at xsbt.boot.Using$.withResource(Using.scala:10)
[error]         at xsbt.boot.Using$.apply(Using.scala:9)
[error]         at xsbt.boot.Locks$GlobalLock.ignoringDeadlockAvoided(Locks.scala:60)
[error]         at xsbt.boot.Locks$GlobalLock.withLock(Locks.scala:50)
[error]         at xsbt.boot.Locks$.apply0(Locks.scala:31)
[error]         at xsbt.boot.Locks$.apply(Locks.scala:28)
[error]         at sbt.internal.librarymanagement.IvySbt.withDefaultLogger(Ivy.scala:77)
[error]         at sbt.internal.librarymanagement.IvySbt.withIvy(Ivy.scala:199)
[error]         at sbt.internal.librarymanagement.IvySbt.withIvy(Ivy.scala:196)
[error]         at sbt.internal.librarymanagement.IvySbt$Module.withModule(Ivy.scala:238)
[error]         at sbt.internal.librarymanagement.IvyActions$.updateEither(IvyActions.scala:193)
[error]         at sbt.librarymanagement.ivy.IvyDependencyResolution.update(IvyDependencyResolution.scala:20)
[error]         at sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:56)
[error]         at sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:45)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:93)
[error]         at sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:68)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$19(LibraryManagement.scala:106)
[error]         at scala.util.control.Exception$Catch.apply(Exception.scala:224)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:106)
[error]         at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:89)
[error]         at sbt.util.Tracked$.$anonfun$inputChanged$1(Tracked.scala:149)
[error]         at sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:120)
[error]         at sbt.Classpaths$.$anonfun$updateTask$5(Defaults.scala:2561)
[error]         at scala.Function1.$anonfun$compose$1(Function1.scala:44)
[error]         at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:40)
[error]         at sbt.std.Transform$$anon$4.work(System.scala:67)
[error]         at sbt.Execute.$anonfun$submit$2(Execute.scala:269)
[error]         at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error]         at sbt.Execute.work(Execute.scala:278)
[error]         at sbt.Execute.$anonfun$submit$1(Execute.scala:269)
[error]         at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error]         at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error]         at java.lang.Thread.run(Thread.java:748)
[error] (update) sbt.librarymanagement.ResolveException: unresolved dependency: com.typesafe.play#sbt-routes-compiler_2.12;2.7.3: Resolution failed several times for dependency: com.typesafe.play#sbt-routes-compiler_2.12;2.7.3 {compile=[default(compile)]}::
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finally&#34;&gt;Finally&lt;/h3&gt;

&lt;p&gt;I opened the sample project as the interllij project and &lt;code&gt;install scala plugin&lt;/code&gt; twice(first failed) and restart intellij. Build the project with &lt;code&gt;JAVA_OPTS&lt;/code&gt;, and failed with dependency evcited error.&lt;/p&gt;

&lt;p&gt;So I delete &lt;code&gt;.sbt&lt;/code&gt; and &lt;code&gt;.lvy2&lt;/code&gt; the two folders and reinstall &lt;code&gt;sbt&lt;/code&gt; and restart computer.&lt;/p&gt;

&lt;p&gt;Rerun project success.&lt;/p&gt;

&lt;p&gt;Here is my vm options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-Dhttp.proxyHost=proxyServer
-Dhttp.proxyPort=8080
-Dsbt.repository.secure=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and haven&amp;rsquo;t repository file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;del&gt;Still don&amp;rsquo;t know why failed at the bash/cmd&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;update:&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s wrong if don&amp;rsquo;t set https_proxy.
Create &lt;code&gt;HTTPS_PROXY&lt;/code&gt; and &lt;code&gt;HTTP_PROXY&lt;/code&gt; with windows way. If the proxy server doesn&amp;rsquo;t accept https, add http protocol like &lt;code&gt;HTTPS_PROXY=http://proxyServer:port&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NO repository file, no vm options, just set &lt;code&gt;HTTPS_PROXY&lt;/code&gt; rightly and your &lt;code&gt;JAVA_OPTS&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;lets-get-faster&#34;&gt;lets get faster&lt;/h3&gt;

&lt;p&gt;Make sure set proxy rightly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;add ~/.sbt/1.0/plugins/plugins.sbt file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;addSbtPlugin(&amp;quot;io.get-coursier&amp;quot; % &amp;quot;sbt-coursier&amp;quot; % &amp;quot;1.1.0-M7&amp;quot;)

libraryDependencies ++= Seq(
&amp;quot;org.vafer&amp;quot; % &amp;quot;jdeb&amp;quot; % &amp;quot;1.6&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add ~/.sbt/1.0/sbt-coursier.sbt file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;import coursier.Keys._

classpathTypes += &amp;quot;maven-plugin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have fun. If get &lt;code&gt;502&lt;/code&gt;, retry.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;refer&#34;&gt;REFER&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43984715/sbt-error-retrieving-required-libraries&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;add repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leiheng.github.io/posts/tools/about-proxy/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;about how to set proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Favicon</title>
      <link>https://leiheng.github.io/posts/hugo/add-favicon/</link>
      <pubDate>Wed, 07 Aug 2019 10:30:55 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/add-favicon/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;找张你喜欢的图, 传到 &lt;code&gt;realfavicongenerator.net&lt;/code&gt; 上去, 这个网站会生成各种适应图和 &lt;code&gt;html&lt;/code&gt; 供你直接使用.&lt;/li&gt;
&lt;li&gt;下载他给你生成的包, 解压到 &lt;code&gt;static&lt;/code&gt;, 这个 &lt;code&gt;static&lt;/code&gt; 是你根目录的那个, &lt;strong&gt;不是&lt;/strong&gt; themes 里的那个.&lt;/li&gt;
&lt;li&gt;给你的那个&lt;code&gt;html&lt;/code&gt; 插入到 themes 下的 &lt;code&gt;layouts\partials\head.html&lt;/code&gt; 中 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 下.&lt;/li&gt;
&lt;li&gt;over&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jvm Infra</title>
      <link>https://leiheng.github.io/posts/java/jvm/jvm-infra/</link>
      <pubDate>Mon, 05 Aug 2019 18:27:25 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/jvm/jvm-infra/</guid>
      <description>

&lt;h2 id=&#34;infra&#34;&gt;infra&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;java 虚拟机分heap、vm stack(虚拟机栈)、method area、 native method stack(本地方法栈)、program counter register(程序计数器)&lt;/li&gt;
&lt;li&gt;线程共享的是方法区和heap，线程私有的是虚拟机栈、本地方法栈、pc 寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;堆-栈和方法区&#34;&gt;堆、栈和方法区&lt;/h2&gt;

&lt;p&gt;最关系的就是heap了，基本上调优都是在堆上调参数。&lt;/p&gt;

&lt;p&gt;对象是在堆上的，句柄是在栈上，而这个栈就是虚拟机栈(每个Java线程拥有自己的独立的native方法栈就是本地方法栈，面向本地方法(用 C++ 写的 native 方法),栈里面存放了对象的局部变量。方法区就是每个被加载的类的静态变量、常量、类信息等。&lt;/p&gt;

&lt;h2 id=&#34;吞吐量优先的gc&#34;&gt;吞吐量优先的GC&lt;/h2&gt;

&lt;p&gt;CMS收集器的关注点是尽可能&lt;strong&gt;缩短&lt;/strong&gt;垃圾收集时&lt;strong&gt;用户线程的停顿时间&lt;/strong&gt;，而parallel GC更看重一个可控制的&lt;strong&gt;吞吐量&lt;/strong&gt;
&amp;gt; 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)&lt;/p&gt;

&lt;h5 id=&#34;高吞吐量可以高效率的利用cpu-适合后台运算不需要太多交互的任务&#34;&gt;高吞吐量可以高效率的利用CPU，适合后台运算不需要太多交互的任务&lt;/h5&gt;

&lt;h2 id=&#34;gc&#34;&gt;GC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;复制算法：年轻代&lt;/li&gt;

&lt;li&gt;&lt;p&gt;标记-整理：年老代&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Q:FullGC 不是针对持久代的么
A:FullGC is cleaning the entire Heap - both Young and Tenured spaces
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;　MinorGC 针对Eden代的（复制算法实现 ： Eden -&amp;gt; survivor0 -&amp;gt;survivor1）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;MajorGC is cleaning the Tenured space(老年代)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eden 的对象经历过Eden -&amp;gt; survivor0 -&amp;gt;survivor1 -&amp;gt;老年代&lt;/p&gt;

&lt;p&gt;Eden是新生对象的存储区域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; 什么情况下新生代对象会晋升到老年代？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; 当对象大小超过了PretenureSizeThreshold设置的对象大小阀值时，对象直接在老年代分配空间
当age从1开始的对象大小累计超过了Survivor区域的1/2(TargetSurvivorRatio所定义)时，会计算一个Thenuring Threshold，超过这个年龄的新生代对象会进入到老年代，即使这时候新生代还有很多的空间。注意MaxTenuringThreshold只是设置了最大的Thenuring Threshold，不是说只有大于Max Tenuring Threshold才会进入到老年代，而是只要超过了计算出来的Tenuring Threshold就会进入老年代，MaxTenuringThreshold规定了Tenuring Threshold的最大值而已。Tenuring Threshold这个值在每一轮GC后都会动态计算，它与TargetSurvivorRatio以及Survivor区的大小有关系，TargetSurivivor默认是50即Survivor的1/2, 会计算出一个Desired Survivor Size，当age从1开始的对象大小累计超过了这个Desired Survivor Size，那么这个age就是Tenuring Threshold的值&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;尽可能地让对象停留在新生代&lt;/p&gt;

&lt;p&gt;因为新生代采用了复制算法，相对收回得更快，而且Minor GC的次数肯定比Full GC多，那么对象在新生代被清除的更能性会更高。而对象一旦进入到老年代，那么只有Full GC时才会回收，对象在整个系统停留的时间就会很长，很可能创建的它的线程早就死了，而它还活着&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了尽可能让对象停留在新生代，就要注意设置Survivor区域的大小
因为它直接和对象是否进入老年代相关。之前就遇到过这种情况，明明新生代还有很大的空间，但是每次Minor GC后总是有对象进入到了老年代。后来发现由于Survivor太小，导致Tenuring Threshold为1，意思是年龄为1的对象大小超过了Survivor / 2(可通过TargetSurvivorRatio来调节，默认是50，即1/2)，年龄只要超过1的对象这时候就要直接进入老年代了。而进入老年代，对象就只有在Full GC的时候才会被清除。而如果调大了Survivor空间，让对象对象尽量接近Max Tenuring Threshold时才进入到老年代，这时候会大大减少老年代的对象大小，并且让对象在新生代停留时间变长，提高了它们被快速清理出系统的概率&lt;/p&gt;

&lt;h2 id=&#34;jvm-properties&#34;&gt;JVM properties&lt;/h2&gt;

&lt;h3 id=&#34;memory-properties&#34;&gt;Memory properties&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-Xmx &lt;nG&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;最大堆大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-Xms &lt;nG&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;初始堆大小,启动jvm时堆内存大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:NewRatio&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;新生代和老年代的内存比&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:NewSize&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;新生代内存大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:SurvivorRatio&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Eden和Survivor的内存比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;gc-properties&#34;&gt;GC properties&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;选项&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:MaxGCPauseMilis=&lt;ms&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;为所需的最长暂停时间设置目标值。默认值是 200 毫秒。指定的值不适用于您的堆大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-XX:InitiatingHeapOccupancyPercent=&amp;lt;%&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintGCDetails&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;打印GC详细信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintAdaptiveSizePolicy&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:G1HeapRegionSize&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置G1区域的大小，值是2的幂，范围是1M-32M之间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+PrintReferenceGC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:+ParallelRefProcEnabled&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:ParallelGCThreads=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Parallel并行收集器的线程数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:ConcGCThreads=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 左右&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-XX:G1MixedGCCountTarget=n&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent的旧区域执行混合垃圾回收的目标次数。默认值是8次混合垃圾回收。混合回的目标是要控制在此目标次数以内。Java HotSpot VM build 23 中没有此设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;jvm-一些参数列表&#34;&gt;jvm 一些参数列表&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;INSTALLER_JAVA_OPTS: &amp;quot;-XX:+UseG1GC -XX:MaxRAMFraction=2 -XshowSettings:vm&amp;quot;
JVM启动参数可以添加-XX:+HeapDumpOnOutOfMemoryError -XX:+PrintHeapAtGC 等参数来协助收集JVM内存溢出信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数解释：
1000m（毫） 一个CPU
100m 0.1cpu&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zhaoyanblog.com/archives/440.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;-XX:+UseG1GC&lt;/code&gt;&lt;/a&gt; : 告诉JVM使用G1 GC
(这篇文章有G1 GC 开关选项完全列表)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:MaxRAMFraction&lt;/code&gt; : Using -XX:MaxRAMFraction we are telling the JVM to use available memory/MaxRAMFraction as max heap. Using -XX:MaxRAMFraction=1 we are using almost all the available memory as max heap
&lt;a href=&#34;https://blog.csanchez.org/2017/05/31/running-a-jvm-in-a-container-without-getting-killed/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;动态的使用container的内存&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XshowSettings&lt;/code&gt; ：显示Setting&lt;/p&gt;

&lt;h3 id=&#34;g1收集器&#34;&gt;G1收集器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方教程&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;G1的年轻代的回收:复制算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;年轻代=Eden + survivor0 + survivor1&lt;/p&gt;

&lt;p&gt;G1收集器与其他收集器不同，他没有新生代、老年代、持久代的的物理memory区域，他是把内存划分为相等小大小的region（独立区域）&lt;/p&gt;

&lt;p&gt;G1 GC 是区域化、分代式垃圾回收器，这意味着 Java 对象堆（堆）被划分成大小相同的若干区域。启动时，Java 虚拟机 (JVM) 会设置区域大小。区域大小从 1 MB 到 32 MB 不等，具体取决于堆大小。目标是产生不超过 2048 个区域。Eden、存活空间和老年代是一系列不连续的逻辑区域。&lt;/p&gt;

&lt;p&gt;G1还有个重要的特性&amp;ndash;能够设置在长度为M毫秒的时间片段里面，消耗在GC上的时间不得超过N毫秒。&lt;/p&gt;

&lt;p&gt;对于使用G1收集器来说，是不是不需要参数调优了？&lt;a href=&#34;https://www.zhihu.com/question/55564388&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;不是的&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;如何解锁实验性虚拟机标志&#34;&gt;如何解锁实验性虚拟机标志&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;要更改实验性标志的值，必须先对其解锁。解锁方法是：在命令行中的实验性标志前，显式地设置 -XX:+UnlockExperimentalVMOptions&lt;/p&gt;

&lt;p&gt;例如：
java -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75  G1test.jar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;重要的参数&#34;&gt;重要的参数&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-XX:G1HeapRegionSize=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:MaxGCPauseMillis=200&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为所需的最长暂停时间设置目标值。默认值是 200 毫秒。指定的值不适用于您的堆大小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1NewSizePercent=5&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置要用作年轻代大小最小值的堆百分比。默认值是 Java 堆的 5%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:DefaultMinNewGenPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1MaxNewSizePercent=60&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置要用作年轻代大小最大值的堆大小百分比。默认值是 Java 堆的 60%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:DefaultMaxNewGenPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:ParallelGCThreads=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。
如果逻辑处理器不止八个，则将 n 的值设置为逻辑处理器数的 &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; 左右。这适用于大多数情况，除非是较大的 SPARC 系统，其中 n 的值可以是逻辑处理器数的 &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;16&lt;/sub&gt; 左右。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:ConcGCThreads=n&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 左右。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:InitiatingHeapOccupancyPercent=45&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;-XX:G1MixedGCLiveThresholdPercent=65&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为混合垃圾回收周期中要包括的旧区域设置占用率阈值。默认占用率为 65%。这是一个实验性的标志。有关示例，请参见“如何解锁实验性虚拟机标志”。此设置取代了 -XX:G1OldCSetRegionLiveThresholdPercent 设置。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1HeapWastePercent=10&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置您愿意浪费的堆百分比。如果可回收百分比小于堆废物百分比，Java HotSpot VM 不会启动混合垃圾回收周期。默认值是 10%。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1MixedGCCountTarget=8&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置标记周期完成后，对存活数据上限为 G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数。默认值是 8 次混合垃圾回收。混合回收的目标是要控制在此目标次数以内。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-XX:G1OldCSetRegionThresholdPercent=10&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置混合垃圾回收期间要回收的最大旧区域数。默认值是 Java 堆的 10%。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-XX:G1ReservePercent=10&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险。默认值是 10%。增加或减少百分比时，请确保对总的 Java 堆调整相同的量。Java HotSpot VM build 23 中没有此设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内存溢出-调整g1收集器&#34;&gt;内存溢出 &amp;amp; 调整G1收集器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000007815623&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;case1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有关溢出和用尽的日志消息
当您在日志中看到目标空间溢出/用尽的消息时，意味着 G1 GC 没有足够的内存，供存活者和/或晋升对象使用。Java 堆不能扩展，因为已达到最大值。示例消息：&lt;/p&gt;

&lt;p&gt;924.897: [GC pause (G1 Evacuation Pause) (mixed) (to-space exhausted), 0.1957310 secs]&lt;/p&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;p&gt;924.897:[GC pause (G1 Evacuation Pause) (mixed) (to-space overflow), 0.1957310 secs]&lt;/p&gt;

&lt;p&gt;要缓解此问题，请尝试以下调整：&lt;/p&gt;

&lt;p&gt;增加 &lt;code&gt;-XX:G1ReservePercent&lt;/code&gt; 选项的值（并相应增加总的堆大小），为“目标空间”增加预留内存量。&lt;/p&gt;

&lt;p&gt;通过减少 &lt;code&gt;-XX:InitiatingHeapOccupancyPercent&lt;/code&gt; 提前启动标记周期。&lt;/p&gt;

&lt;p&gt;您也可以通过增加 &lt;code&gt;-XX:ConcGCThreads&lt;/code&gt; 选项的值来增加并行标记线程的数目。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：不断的调整jvm内存比例，老年代、年轻代、以及持久代的比例，直到测试出一个比较满意的值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://allegro.tech/2018/05/a-comedy-of-errors-debugging-java-memory-leaks.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;case2&lt;/a&gt;&lt;a href=&#34;http://www.importnew.com/29591.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这个例子里面, 主要的问题是 &lt;strong&gt;premature tenuring&lt;/strong&gt;(过早提升), 用了 &lt;code&gt;-XX:G1NewSizePercent=5&lt;/code&gt; &amp;amp; &lt;code&gt;-XX:G1MaxNewSizePercent=60&lt;/code&gt; &amp;amp; &lt;code&gt;-XX:G1MixedGCLiveThresholdPercent=65&lt;/code&gt; 这三个参数, 虽然并没有直接解决问题. 虽然都是提高young 的大小,但是使用的参数是不一样的.&lt;/p&gt;

&lt;h2 id=&#34;jvm-的静态绑定和动态绑定&#34;&gt;JVM 的静态绑定和动态绑定&lt;/h2&gt;

&lt;p&gt;waiting&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NFS Sharing</title>
      <link>https://leiheng.github.io/posts/linux/linux-sharing/</link>
      <pubDate>Mon, 05 Aug 2019 16:12:53 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/linux-sharing/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://cn.linux.vbird.org/linux_server/0330nfs.php&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;参考文档：鸟哥&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nfs-netfilesystem&#34;&gt;NFS：NetFileSystem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;在启动NFS之前就要启动 Remote Procedure Call（RPC）&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;rpc&#34;&gt;RPC：&lt;/h3&gt;

&lt;p&gt;因为 NFS 支持的功能相当的多，而不同的功能都会使用不同的程序来启动， 每启动一个功能就会启用一些端口来传输数据，因此， NFS 的功能所对应的端口才没有固定住， 而是随机取用一些未被使用的小于 1024 的埠口来作为传输之用。但如此一来又造成客户端想要连上服务器时的困扰， 因为客户端得要知道服务器端的相关埠口才能够联机吧！&lt;/p&gt;

&lt;p&gt;此时我们就得需要远程过程调用 (RPC) 的服务啦！RPC 最主要的功能就是在指定每个 NFS 功能所对应的 port number ，并且回报给客户端，让客户端可以连结到正确的埠口上去。 那 RPC 又是如何知道每个 NFS 的埠口呢？这是因为当服务器在启动 NFS 时会随机取用数个埠口，并主动的向 RPC 注册，因此 RPC 可以知道每个埠口对应的 NFS 功能，然后 RPC 又是固定使用 port 111 来监听客户端的需求并回报客户端正确的埠口， 所以当然可以让 NFS 的启动更为轻松愉快了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;所以你要注意，要启动 NFS 之前，RPC 就要先启动了，否则 NFS 会无法向RPC注册。另外，RPC 若重新启动时，原本注册的数据会不见，因此RPC重新启动后，它管理的所有服务都需要重新启动来重新向 RPC 注册。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;nfs-的档案访问权限&#34;&gt;NFS 的档案访问权限&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(相关：Linux的 user、group)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;client的的uid和server folder开放的权限以及文件本身的读写权限&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当client的uid(非root)能在server上找到对应用户，则client的身份就是该对应用户，以该用户身份操作文件&lt;/li&gt;
&lt;li&gt;当client的uid(非root)不能在server上找到，则client的身份被压缩成anonymous。！！！有例外，当被expose folder是/tmp 时，这种情况下client的uid不变。(虽然很诡异，但是事实就是这样)&lt;/li&gt;
&lt;li&gt;当client的身份是root，server开放权限是root_squash，则client身份被压缩成anonymous，这个时候就要看文件本身对anonymous用户开放的权限(anonymous 对应为 other)&lt;/li&gt;
&lt;li&gt;当client的身份是root，server开放权限是no_root_squash,则client在server上操作文件的身份就是root&lt;/li&gt;
&lt;li&gt;当server开放的权限是all_squash，无论client的身份是root还是其他、uid是否能在server上找到对应用户，一律被压缩成anonymous&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;npc-需要的软件&#34;&gt;NPC 需要的软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RPC主程序：rpcbind&lt;/li&gt;
&lt;li&gt;NFS主程序：nfs-utils&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

#这个脚本作用是如果机器上没有安装nfs服务，安装服务，暴露目录，启动服务
#传入参数：暴露的目录（dir）、是否存在nfs-server（boolean）、UID、GID

#default expose folder /nfsdir
folder=${1:-&amp;quot;/var/vols/itom/core&amp;quot;}
isNFSServer=${2:-&amp;quot;true&amp;quot;}
userId=${3:-&amp;quot;1999&amp;quot;}
groupId=${4:-&amp;quot;1999&amp;quot;}
setupNFS(){
    echo &amp;quot;Setting up the NFS service ... &amp;quot;
    path=$(dirname $0)
    cd $path
    #check if NFS is installed
    isNFS=`rpm -qa|grep nfs-utils|wc -l`
    if [ $isNFS = 0 ]; then
        #install NFS with yum first. If the first try is failed then install NFS with rpm
        yum install -y nfs-utils 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
        if [ $? != 0 ]; then
            rpm -ivh ../rpm/rpcbind-0.2.0-26.el7.x86_64.rpm 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
            rpm -ivh ../rpm/nfs-utils-1.3.0-0.8.el7.x86_64.rpm 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null
            if [ $? != 0 ]; then
                echo &amp;quot;The NFS service installation failed.&amp;quot;
                echo &amp;quot;If you have a CentOS repo or you can access the Internet from this host,&amp;quot;
                echo &amp;quot;you can install NFS with the command \&amp;quot;yum install -y ufs-utils\&amp;quot;.&amp;quot;
                echo &amp;quot;If you don&#39;t have a CentOS repo and cannot access the Internet from this&amp;quot;
                echo &amp;quot;host, please download the nfs-utils and rpcbind packages and upload them&amp;quot;
                echo &amp;quot;to this host. Then run the command \&amp;quot;rpm -ivh &amp;lt;rpm-package-name&amp;gt;\&amp;quot; to install.&amp;quot;
                exit 1
            fi
        fi
        isNFS=`rpm -qa|grep nfs-utils|wc -l`
        if [ $isNFS -gt 0 ]; then
            echo &amp;quot;The NFS service was installed successfully.&amp;quot;
        fi
    else
        echo &amp;quot;The NFS service was found to be already installed.&amp;quot;
    fi
}

exposeFolder() {
    nfsdir=$1
    echo &amp;quot;Exposing the folder ${nfsdir} ...&amp;quot;
    if [ ! -d $nfsdir ]; then
        mkdir -p $nfsdir
    fi
    chown -R ${userId}:${groupId} $nfsdir
    #if nfsdir isn&#39;t exist on exports,adding or not
    isConfig=`grep -v &#39;^$\|^\s*\#&#39; /etc/exports|grep &amp;quot;$nfsdir &amp;quot;|wc -l `
    if [ $isConfig = 0 ]; then
    echo &amp;quot;$nfsdir *(rw,sync,anonuid=${userId},anongid=${groupId},all_squash)&amp;quot;&amp;gt;&amp;gt;/etc/exports
    fi
    exportfs -ra
    systemctl restart rpcbind
    systemctl enable rpcbind
    systemctl restart nfs-server
    systemctl enable nfs-server
}

#main
setupNFS
if [ &amp;quot;$isNFSServer&amp;quot; = true ]; then
    exposeFolder $folder
else
    echo &amp;quot;If you want to expose your nfs folder.&amp;quot;
    echo &amp;quot;Usage: $0 [folder] [true] [userId] [groupId]&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;用户权限&#34;&gt;用户权限：&lt;/h5&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rw ：read write&lt;/li&gt;
&lt;li&gt;ro ：read only&lt;/li&gt;
&lt;li&gt;sync ：直接写入内存与硬盘&lt;/li&gt;
&lt;li&gt;async ：先写入缓存&lt;/li&gt;
&lt;li&gt;no_root_squash ：client可以root权限操作&lt;/li&gt;
&lt;li&gt;root_squash ：client以root登陆会被压缩成匿名用户&lt;/li&gt;
&lt;li&gt;all_squash ：无论以什么身份登陆都会被压缩成匿名用户&lt;/li&gt;
&lt;li&gt;anonuid ：匿名用户的uid&lt;/li&gt;
&lt;li&gt;anongid ：匿名用户的gid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tip：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;all_squash 要配合 anonuid、gid使用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;anonuid、&lt;del&gt;gid可以单独使用&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;client-挂载&#34;&gt;client 挂载&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;mount -t nfs serverip:expose_fold   client_mount_fold&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;automount-autofs&#34;&gt;automount————autofs&lt;/h3&gt;

&lt;p&gt;autofs：在客户端上应用
在客户端计算机上，会持续侦测某个指定目录，并预先设定当使用该目录下的某个次目录下时，将会取得来自服务端的NFS文件系统资源，并进行自动挂载的动作&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;li&gt;rpm -qa | grep nfs &amp;amp;&amp;amp; rpm -qa | grep rpcbind //判断是否有nfs服务&lt;/li&gt;
&lt;li&gt;vim /etc/exports //文件中写要export出去的目录或者文件
/tmp 195.154.1.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;25&lt;/sub&gt;(ro) localhost(rw) // 将/tmp目录exports给IP地址为195.154.1.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;25&lt;/sub&gt; (权限为ro)、localhost(权限为rw)&lt;/li&gt;
&lt;li&gt;exportfs -ra
systemctl restart rpcbind
systemctl enable rpcbind
systemctl restart nfs-server
systemctl enable nfs-server&lt;/li&gt;
&lt;li&gt;showmount -e localhost&lt;/li&gt;
&lt;li&gt;client&lt;/li&gt;
&lt;li&gt;mount -t nfs 192.168.100.254:/home/public /tmp //将IP为192.168.100.254的/home/public挂载到/tmp上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showmount -e serverhost&lt;/code&gt; 查看server端有哪些file可以被mount&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df&lt;/code&gt;或者&lt;code&gt;mount&lt;/code&gt;查看mount file之后的情况&lt;/li&gt;
&lt;li&gt;umount /home/nfs/public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>