<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray&#39;s Blog on Ray&#39;s Blog</title>
    <link>https://leiheng.github.io/</link>
    <description>Recent content in Ray&#39;s Blog on Ray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 27 Nov 2019 16:09:40 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Make Pipe Work in Java</title>
      <link>https://leiheng.github.io/posts/java/make-pipe-work-in-java/</link>
      <pubDate>Wed, 27 Nov 2019 16:09:40 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/make-pipe-work-in-java/</guid>
      <description>&lt;p&gt;坑爹啊, 我写了个用pipe的linux command, 用了 &lt;code&gt;Runtime.exec(String cmd)&lt;/code&gt;, 似乎没有什么作用. 非常的困惑, 明明这个命令能够在linux 上跑的. 我还怀疑是不是最后的返回的问题(因为我这条命令最后的确会报个kill 不存在的pid). 还用了 &lt;code&gt;&amp;gt; /dev/null &amp;gt; 2&amp;amp;1&lt;/code&gt;, 但是并没有起作用.&lt;/p&gt;

&lt;p&gt;伟大的StackOverflow, 给出了&lt;a href=&#34;https://stackoverflow.com/questions/5928225/how-to-make-pipes-work-with-runtime-exec&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;回答&lt;/a&gt;
用String [], 我之前阅读过这段代码, 知道String 最后会被拆成String [], 但是没想到啊, 要在前面加 &lt;code&gt;sh -c&lt;/code&gt;. 最后 用了 &lt;code&gt;sh -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;DONE.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Http Not Supported or Disabled in Libcurl</title>
      <link>https://leiheng.github.io/posts/misc/http-not-supported-or-disabled-in-libcurl/</link>
      <pubDate>Tue, 12 Nov 2019 19:20:28 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/http-not-supported-or-disabled-in-libcurl/</guid>
      <description>&lt;p&gt;如题. 一个这样的问题. 我在网上搜的时候发现排名第一的StackOverflow的回答说是 windows 不支持单引号 ==_==&amp;hellip;..&lt;/p&gt;

&lt;p&gt;想到之前自己做过的一个实验, 在win上用同一个东西加密, 单引括起来的加密的结果就是和双引号/不加引号的结果不一样, 没想到今天居然还搜到了最终回答&amp;hellip;.. &lt;strong&gt;win这个狗逼不支持单引号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是我的环境是在linux 上出现的这个问题. 这个最终答案也很蠢&amp;hellip;.
就是http 和 双引号之间有个 &lt;strong&gt;空格&lt;/strong&gt;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;Like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;leih:/opt/dah # curl --noproxy localhost &amp;quot;http://localhost:9060/Action=Encrypted&amp;quot;
{&amp;quot;autnresponse&amp;quot;:{&amp;quot;action&amp;quot;:{&amp;quot;$&amp;quot;:&amp;quot;QUERY&amp;quot;},&amp;quot;response&amp;quot;:{&amp;quot;$&amp;quot;:&amp;quot;SUCCESS&amp;quot;}}}
leih:/opt/dah #
leih:/opt/dah # curl --noproxy localhost &amp;quot; http://localhost:9060/Action=Encrypted&amp;quot;
curl: (1) Protocol &amp;quot; http&amp;quot; not supported or disabled in libcurl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OR 用了错误的引号: &lt;a href=&#34;https://stackoverflow.com/questions/6884669/curl-1-protocol-https-not-supported-or-disabled-in-libcurl&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/6884669/curl-1-protocol-https-not-supported-or-disabled-in-libcurl&lt;/a&gt;, 那个第三个回答.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;看来会有很多格式错误会导致这个问题呢. curl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play 05</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-05/</link>
      <pubDate>Mon, 11 Nov 2019 14:49:28 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-05/</guid>
      <description>

&lt;h2 id=&#34;protobuf-serialization&#34;&gt;protobuf serialization&lt;/h2&gt;

&lt;p&gt;protobuf 序列化不难, 他有自己默认的序列化和反序列化. 并且是支持驼峰的命名模式的. 但是关键的是, 我们框架的里面用的jackson 的序列化工具. 怎么把他们集成到一块呢????&lt;/p&gt;

&lt;h3 id=&#34;custom-jackson-simplemodel&#34;&gt;custom Jackson simpleModel&lt;/h3&gt;

&lt;h2 id=&#34;json-provide-module-load-order&#34;&gt;Json Provide module load order&lt;/h2&gt;

&lt;p&gt;TODO:
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play 04</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-04/</link>
      <pubDate>Tue, 05 Nov 2019 14:23:36 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-04/</guid>
      <description>

&lt;h2 id=&#34;custom-annotation&#34;&gt;Custom annotation&lt;/h2&gt;

&lt;h3 id=&#34;add-attrs-to-request&#34;&gt;add attrs to request.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;request = request.addAttr(TypedKey, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;   这个&lt;code&gt;request=request...&lt;/code&gt; 一定要加上, 不然你以为你加上去了,但其实并没有.&lt;/p&gt;

&lt;p&gt;最后当你&lt;code&gt;request.attrs().getOptional()&lt;/code&gt;的时候就会非常的悲剧, 并且还不知道为什么会拿不到东西&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play 03</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-03/</link>
      <pubDate>Mon, 04 Nov 2019 20:00:47 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-03/</guid>
      <description>

&lt;h2 id=&#34;play-ut-practice&#34;&gt;Play UT practice&lt;/h2&gt;

&lt;p&gt;怎么写play 的UT, 尤其是写跟ebean 相关的 UT, 而且还有 component inject, 以及 component mock.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jackson Practice 01</title>
      <link>https://leiheng.github.io/posts/java/json/jackson-practice-01/</link>
      <pubDate>Wed, 30 Oct 2019 20:17:49 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/json/jackson-practice-01/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;允许 lon 这个字段被反序列化, 但是不允许序列化.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Data
@JsonIgnoreProperties(value = &amp;quot;lon&amp;quot;,allowSetters=true)
public static class SimpleJson {
private Long lon;
private String str;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circular Dependencies</title>
      <link>https://leiheng.github.io/posts/java/circular-dependencies/</link>
      <pubDate>Mon, 14 Oct 2019 16:49:51 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/circular-dependencies/</guid>
      <description>

&lt;h2 id=&#34;di&#34;&gt;DI&lt;/h2&gt;

&lt;h3 id=&#34;ioc&#34;&gt;IOC&lt;/h3&gt;

&lt;h2 id=&#34;break-it&#34;&gt;Break it&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swagger Practice</title>
      <link>https://leiheng.github.io/posts/java/playframwork/swagger-practice/</link>
      <pubDate>Mon, 14 Oct 2019 16:04:45 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/swagger-practice/</guid>
      <description>

&lt;h2 id=&#34;let-s-use-swagger-to-generate-api-docs&#34;&gt;let&amp;rsquo;s use swagger to generate api docs&lt;/h2&gt;

&lt;p&gt;Using Swagger in Spring project is very very simple, just import dependency and use api annotaion, done! Then you can use &lt;code&gt;{projectBaseContext}/swagger.json&lt;/code&gt; to get apidocs!&lt;/p&gt;

&lt;p&gt;Now, how to use swagger on play2.7?&lt;/p&gt;

&lt;h3 id=&#34;add-dependency-in-sbt&#34;&gt;add dependency in sbt&lt;/h3&gt;

&lt;p&gt;// todo&lt;/p&gt;

&lt;h3 id=&#34;ignore-ebean-interator&#34;&gt;ignore &lt;code&gt;_ebean_interator&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UT Practice</title>
      <link>https://leiheng.github.io/posts/java/ut-practice/</link>
      <pubDate>Thu, 10 Oct 2019 15:35:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/ut-practice/</guid>
      <description>

&lt;p&gt;PowerMock vs Mockito&lt;/p&gt;

&lt;p&gt;只有在mock static method 时候才使用 PowerMock, 其余时间都用Mockito&lt;/p&gt;

&lt;h1 id=&#34;spring-ut&#34;&gt;Spring UT&lt;/h1&gt;

&lt;p&gt;说是Spring 的UT, 不如说成是 mockito 和 power mocker 的入坑笔记好了.😄&lt;/p&gt;

&lt;h1 id=&#34;playframwork-ut&#34;&gt;Playframwork UT&lt;/h1&gt;

&lt;p&gt;play 的 ut 我专门写了一篇笔记来记录&amp;hellip;.&lt;/p&gt;

&lt;h1 id=&#34;js-ut-jsunit&#34;&gt;js UT &amp;ndash; jsunit&lt;/h1&gt;

&lt;p&gt;[Go to UT for playframwork.]()&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Misc</title>
      <link>https://leiheng.github.io/posts/misc/windows-misc/</link>
      <pubDate>Thu, 10 Oct 2019 15:34:24 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/windows-misc/</guid>
      <description>

&lt;h2 id=&#34;nfs-on-windows&#34;&gt;NFS on windows&lt;/h2&gt;

&lt;p&gt;老是跑到一台机器上去看东西,受不了了, 于是在我本机开了个nfs client. 过程还好, 就是后来我一不小心改了一个东西, 重启之后我磁盘锁死了&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;win-不支持单引号&#34;&gt;win 不支持单引号&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Writing Specification</title>
      <link>https://leiheng.github.io/posts/linux/bash-writing-specification/</link>
      <pubDate>Tue, 24 Sep 2019 17:32:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/bash-writing-specification/</guid>
      <description>&lt;p&gt;Bash 写作的一些规范&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>做工程的一些道理</title>
      <link>https://leiheng.github.io/posts/misc/about-project/</link>
      <pubDate>Mon, 16 Sep 2019 14:00:48 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-project/</guid>
      <description>

&lt;h2 id=&#34;数据模型的构建&#34;&gt;数据模型的构建&lt;/h2&gt;

&lt;p&gt;数据模型非常重要, 一旦数据模型设计不咋, 之后重构就是一团糟&lt;/p&gt;

&lt;h2 id=&#34;论需求和解决方法&#34;&gt;论需求和解决方法&lt;/h2&gt;

&lt;p&gt;PM 提需求就提需求, 解决方案都是rd的事情.&lt;/p&gt;

&lt;h2 id=&#34;论代码分层&#34;&gt;论代码分层&lt;/h2&gt;

&lt;p&gt;Controller 和 service 以及中台 service 分层.
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>StackOverflow Error</title>
      <link>https://leiheng.github.io/posts/java/stackoverflow-error/</link>
      <pubDate>Thu, 12 Sep 2019 11:23:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/stackoverflow-error/</guid>
      <description>

&lt;p&gt;我还没想到我居然能够遇到StackOverflow 这种级别的错.&lt;/p&gt;

&lt;p&gt;先来复习一下什么叫StackOverflow Error.&lt;/p&gt;

&lt;h2 id=&#34;error-review&#34;&gt;ERROR - review&lt;/h2&gt;

&lt;h3 id=&#34;stackoverflow-error&#34;&gt;StackOverflow Error&lt;/h3&gt;

&lt;p&gt;StackOverflow&lt;/p&gt;

&lt;h2 id=&#34;object-to-json&#34;&gt;object to json&lt;/h2&gt;

&lt;h3 id=&#34;fix&#34;&gt;Fix&lt;/h3&gt;

&lt;p&gt;网上看到这种错一般都是用Gson, 一般解决方法就是不让他显示出来&amp;hellip;.这是什么解决方案. 于是我就用jackson, done.
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play With Play 02</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</link>
      <pubDate>Mon, 09 Sep 2019 18:14:43 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</guid>
      <description>

&lt;h2 id=&#34;get-request-body&#34;&gt;Get request body&lt;/h2&gt;

&lt;p&gt;拿到body 并且转换成dto,而且我再吐槽一句, playframwork的官方guid上写的body 转 dto居然是自己写个annotation去转&amp;hellip;.这不是有毛病吗????&lt;/p&gt;

&lt;p&gt;本来我之前的写法是自己用&lt;code&gt;Json.fromJson()&lt;/code&gt;来转换的, 但是后来发现play自己给我包装了一个, 所以hhhh,就用这个吧.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Optional&amp;lt;Info&amp;gt; optional = request.body().parseJson(Info.class);
    if (!optional.isPresent()) {
      return apiBadRequest(&amp;quot;Cannot create Info&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;一般来说, 如果 &lt;code&gt;optional.isPresent() == false&lt;/code&gt; 的话, 就是 &lt;code&gt;request&lt;/code&gt; 的 &lt;code&gt;header&lt;/code&gt; 没带 &lt;code&gt;Content-Type: application/json&lt;/code&gt;
当然, 我们在反序列话的时候会抛异常&amp;hellip;.. 这个时候吧, 你要是用个&lt;code&gt;try-catch&lt;/code&gt;, 这个代码真的很难搞&amp;hellip;..我现在还不知道这样子写是不是smell的&amp;hellip;.反正现在我就没try-catch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然我们还有更加装逼式的写法那就是 &lt;code&gt;Maybe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Optional&amp;lt;Info&amp;gt; optional = request.body().parseJson(Info.class);
Maybe.just(optional)
.filter(filter-&amp;gt;optional.isPresent())
.map(op-&amp;gt;op.get())
.switchIfEmpty(Maybe.error(new Exception(&amp;quot;Unable to find.&amp;quot;)))
.map()
.....subscribe()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然这种方式太有侵入性了.而且我现在也&lt;strong&gt;不能确定&lt;/strong&gt;到底这种写法是否符合&lt;strong&gt;play! practice.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;ut-get-result-body&#34;&gt;UT get result body&lt;/h2&gt;

&lt;p&gt;emm, play 的ut 太魔性了. 拿回来的result我查了一会儿才知道怎么转成 String&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://leiheng.github.io/posts/misc/about-proxy/</link>
      <pubDate>Wed, 21 Aug 2019 10:42:36 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-proxy/</guid>
      <description>

&lt;h2 id=&#34;about-proxy&#34;&gt;About proxy&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;windows 设置 proxy 必须从&lt;strong&gt;环境变量&lt;/strong&gt; 设置, 这里不是说从 &lt;code&gt;powershell/cmd/gitbash&lt;/code&gt; 设置. 并且它可以设置protocol:
&lt;code&gt;HTTPS_PROXY=http://server:port&lt;/code&gt; 这种样式.&lt;/li&gt;
&lt;li&gt;Linux 大家都知道能够设置protocol.&lt;/li&gt;
&lt;li&gt;maven &amp;amp; gradle 必须从 &lt;code&gt;settings.xml/gradle.properties&lt;/code&gt; 中读取 proxy 配置, 且不支持设置 protocol.&lt;/li&gt;
&lt;li&gt;npm &amp;amp; git 支持设置protocol, 且支持disable https.&lt;/li&gt;
&lt;li&gt;sbt 的 proxy首先是读取的 &lt;code&gt;JAVA_OPTS&lt;/code&gt;, 如果里面设置了http, 那么就读这种proxy, 但是, &lt;code&gt;JAVA_OPTS&lt;/code&gt; 不支持设置 protocol.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;所以-如果你的-proxy-不支持https-方式连接-那么酌情混合使用&#34;&gt;所以, 如果你的 proxy 不支持https 方式连接, 那么酌情混合使用.&lt;/h3&gt;

&lt;h4 id=&#34;说一说为啥我的postman总是找不到localhost和-127-0-0-1-吧&#34;&gt;说一说为啥我的postman总是找不到localhost和&lt;code&gt;127.0.0.1&lt;/code&gt;吧&lt;/h4&gt;

&lt;p&gt;这也是配置的问题, 我一直觉得postman用系统proxy是走的那个网络proxy, 就是通过&lt;code&gt;chrome:/settings&lt;/code&gt;找到的那个配置proxy的地方. 但其实不是, 他妈的去找环境变量了, 就是&lt;code&gt;HTTP_PROXY&lt;/code&gt;这个环境变量, 所以, 你还的配置一个 &lt;code&gt;NO_PROXY&lt;/code&gt; 这样的环境变量&amp;hellip;..&lt;/p&gt;

&lt;p&gt;顺便记录一下, postman dev tool 挺好用的, 打开它去看request,还能看到具体的报错信息, 解决postman proxy 的问题就是通过看他具体报错看出来的&amp;hellip;&amp;hellip;..&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>