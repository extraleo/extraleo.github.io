<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ray&#39;s Blog</title>
    <link>https://leiheng.github.io/posts/</link>
    <description>Recent content in Posts on Ray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 10 Oct 2019 15:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://leiheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UT Practice</title>
      <link>https://leiheng.github.io/posts/java/ut-practice/</link>
      <pubDate>Thu, 10 Oct 2019 15:35:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/ut-practice/</guid>
      <description>PowerMock vs Mockito 只有在mock static method 时候才使用 PowerMock, 其余时间都用Mockito ·End·</description>
    </item>
    
    <item>
      <title>Windows Misc</title>
      <link>https://leiheng.github.io/posts/misc/windows-misc/</link>
      <pubDate>Thu, 10 Oct 2019 15:34:24 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/windows-misc/</guid>
      <description>NFS on windows 老是跑到一台机器上去看东西,受不了了, 于是在我本机开了个nfs client. 过程还好, 就是后来我一不小心改了一个东西, 重启之后我磁盘锁死了&amp;hel</description>
    </item>
    
    <item>
      <title>Bash Writing Specification</title>
      <link>https://leiheng.github.io/posts/linux/bash-writing-specification/</link>
      <pubDate>Tue, 24 Sep 2019 17:32:00 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/bash-writing-specification/</guid>
      <description>Bash 写作的一些规范 ·End·</description>
    </item>
    
    <item>
      <title>做工程的一些道理</title>
      <link>https://leiheng.github.io/posts/misc/about-project/</link>
      <pubDate>Mon, 16 Sep 2019 14:00:48 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-project/</guid>
      <description>数据模型的构建 数据模型非常重要, 一旦数据模型设计不咋, 之后重构就是一团糟 论需求和解决方法 PM 提需求就提需求, 解决方案都是rd的事情. 论代码分层</description>
    </item>
    
    <item>
      <title>StackOverflow Error</title>
      <link>https://leiheng.github.io/posts/java/stackoverflow-error/</link>
      <pubDate>Thu, 12 Sep 2019 11:23:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/stackoverflow-error/</guid>
      <description>我还没想到我居然能够遇到StackOverflow 这种级别的错. 先来复习一下什么叫StackOverflow Error. ERROR - review StackOverflow Error StackOverflow object to json Fix 网上看到这</description>
    </item>
    
    <item>
      <title>Play With Play!-02</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</link>
      <pubDate>Mon, 09 Sep 2019 18:14:43 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-02/</guid>
      <description>Get request body 拿到body 并且转换成dto,而且我再吐槽一句, playframwork的官方guid上写的body 转 dto居然是自己写个annota</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://leiheng.github.io/posts/misc/about-proxy/</link>
      <pubDate>Wed, 21 Aug 2019 10:42:36 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/about-proxy/</guid>
      <description>About proxy windows 设置 proxy 必须从环境变量 设置, 这里不是说从 powershell/cmd/gitbash 设置. 并且它可以设置protocol: HTTPS_PROXY=http://server:port 这种样式. Linux 大家都知道能够设置protocol. maven &amp;amp; gradle</description>
    </item>
    
    <item>
      <title>Grpc 1</title>
      <link>https://leiheng.github.io/posts/rpc/java/grpc-1/</link>
      <pubDate>Thu, 15 Aug 2019 17:11:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/rpc/java/grpc-1/</guid>
      <description>Step 1 Of course we need clone project from github, now I goto example folder and compile project.
Ooooooooooooooops! It failed even already behind proxy, so I set proxy i gradle.properties at example path. For example:
#http proxy setup #dont need protocol &amp;quot;http&amp;quot; systemProp.http.proxyHost=server systemProp.http.proxyPort=8080 #https proxy setup #dont need protocol &amp;quot;http&amp;quot; systemProp.https.proxyHost=server systemProp.https.proxyPort=8080  Step 2 lets use akka-grpc generate grpc proto 
 ·End·</description>
    </item>
    
    <item>
      <title>Maven Dependencies Pom Type</title>
      <link>https://leiheng.github.io/posts/java/maven-dependencies/</link>
      <pubDate>Tue, 13 Aug 2019 17:16:54 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/maven-dependencies/</guid>
      <description>终于有一天, 我看到我自己 java 练习项目依赖, 配置乱成一坨糟, 心里很糟心, 就打算整理整理整理. 于是创建了 common-dependency-parent, 项目结构如下: . |-- common-dep | `-- pom.xml |-- pom.xml `-- shared-pom `-- pom.xml 其</description>
    </item>
    
    <item>
      <title>Odds and Ends</title>
      <link>https://leiheng.github.io/posts/k8s/odds-and-ends/</link>
      <pubDate>Tue, 13 Aug 2019 11:30:34 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/odds-and-ends/</guid>
      <description>terminationGracePeriod 在05-&amp;gt;08中，nginx从deployment-&amp;gt;daemonset,用k8s的upgrade policy并不起作用。up</description>
    </item>
    
    <item>
      <title>Change DNS</title>
      <link>https://leiheng.github.io/posts/hugo/change-dns/</link>
      <pubDate>Thu, 08 Aug 2019 13:20:14 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/change-dns/</guid>
      <description>·End·</description>
    </item>
    
    <item>
      <title>Play With Play!-01</title>
      <link>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</link>
      <pubDate>Thu, 08 Aug 2019 13:16:32 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/playframwork/play-with-play-01/</guid>
      <description>prepare install gradle install sbt gradle 我尝试去使用 gradle 去构建项目, 但是一时半会还没能理解 gradle 里面 plugins 怎么玩的, 遂放弃, 先把 play 玩起来再说. sbt I&amp;rsquo;m new one for playframwork. My intellij cannot import sbt project so that tried to run sbt</description>
    </item>
    
    <item>
      <title>Add Favicon</title>
      <link>https://leiheng.github.io/posts/hugo/add-favicon/</link>
      <pubDate>Wed, 07 Aug 2019 10:30:55 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/hugo/add-favicon/</guid>
      <description>找张你喜欢的图, 传到 realfavicongenerator.net 上去, 这个网站会生成各种适应图和 html 供你直接使用. 下载他给你生成的包, 解压到 static, 这个 static 是你根目录的那个, 不是 themes 里的那个. 给</description>
    </item>
    
    <item>
      <title>Jvm Infra</title>
      <link>https://leiheng.github.io/posts/java/jvm/jvm-infra/</link>
      <pubDate>Mon, 05 Aug 2019 18:27:25 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/jvm/jvm-infra/</guid>
      <description>infra java 虚拟机分heap、vm stack(虚拟机栈)、method area、 native method stack(本地方法栈)、program counter register(程序</description>
    </item>
    
    <item>
      <title>NFS Sharing</title>
      <link>https://leiheng.github.io/posts/linux/linux-sharing/</link>
      <pubDate>Mon, 05 Aug 2019 16:12:53 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/linux-sharing/</guid>
      <description>参考文档：鸟哥 NFS：NetFileSystem 在启动NFS之前就要启动 Remote Procedure Call（RPC） RPC： 因为 NFS 支持的功能相当的多，而不同的功能</description>
    </item>
    
    <item>
      <title>Linux Command</title>
      <link>https://leiheng.github.io/posts/linux/linux-command/</link>
      <pubDate>Mon, 05 Aug 2019 15:53:33 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/linux/linux-command/</guid>
      <description>bash script include other bash file in your script Above answers is correct, but if run script in other folder, there will be some problem. For example, the a.sh and b.sh are in same folder, a include b with . ./b.sh to include. When run script out of the folder, for example with xx/xx/xx/a.sh, file b.sh will not found: ./b.sh: No such file or directory. I use . $(dirname &amp;quot;$0&amp;quot;)/b.sh</description>
    </item>
    
    <item>
      <title>Create an Object</title>
      <link>https://leiheng.github.io/posts/design-patterns/create-an-object/</link>
      <pubDate>Fri, 02 Aug 2019 16:50:38 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/design-patterns/create-an-object/</guid>
      <description>Builder Pattern @Getter @Setter public class BuilderSample { private String compo; private boolean flag; private BuilderSample(SampleBuild build) { this.compo = build.compo; this.flag = build.flag; } public static class SampleBuild { private String compo; private boolean flag = false; public BuilderSample build() { return new BuilderSample(this); } public SampleBuild setCompo(String compon) { this.compo = compon; return this; } public SampleBuild setFlag(boolean flag) { this.flag = flag; return this; } } }  OR use @Bulid ,everything is simple.</description>
    </item>
    
    <item>
      <title>Diff StatefulSet and Deployment</title>
      <link>https://leiheng.github.io/posts/k8s/diff-statefulset-and-deployment/</link>
      <pubDate>Fri, 02 Aug 2019 15:53:01 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/diff-statefulset-and-deployment/</guid>
      <description>Deployment - You specify a PersistentVolumeClaim that is shared by all pod replicas. In other words, shared volume. The backing storage obviously must have ReadWriteMany or ReadOnlyMany accessMode if you have more than one replica pod. StatefulSet - You specify a volumeClaimTemplates so that each replica pod gets a unique PersistentVolumeClaim associated with it. In other words, no shared volume. Here, the backing storage can have ReadWriteOnce accessMode The deployment</description>
    </item>
    
    <item>
      <title>Install K8s The Hard Way</title>
      <link>https://leiheng.github.io/posts/k8s/install-k8s-hard-way/</link>
      <pubDate>Fri, 02 Aug 2019 15:20:37 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/k8s/install-k8s-hard-way/</guid>
      <description>Language is simple, show me your code. # close swap setenforce 0 sudo sed -i &#39;/SELINUX=enforcing/ s/enforcing/disabled/&#39; /etc/selinux/config sudo swapoff -a sudo sed -i &#39;/ swap / s/^/#/g&#39; /etc/fstab reboot # set proxy cat&amp;gt;&amp;gt;/etc/profile&amp;lt;&amp;lt;-EOF export http_proxy=http://proxy.houston.hpecorp.net:8080 export https_proxy=http://proxy.houston.hpecorp.net:8080 EOF source /etc/profile mkdir /root/all-file cd /root/all-file # get docker and set proxy for docker curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh mkdir -p /etc/systemd/system/docker.service.d cat&amp;gt;&amp;gt;/etc/systemd/system/docker.service.d/http-proxy.conf&amp;lt;&amp;lt;-EOF [Service] Environment=&amp;quot;HTTP_PROXY=http://proxy-llb-hpm01.sgp.hp.com:8080&amp;quot; &amp;quot;HTTPS_PROXY=http://proxy-llb-hpm01.sgp.hp.com:8080&amp;quot; &amp;quot;NO_PROXY=localhost,127.0.0.1,.hp.com,.hpe.com,.hpeswlab.net,.hpecorp.net,.softwaregrp.net,.swinfra.net&amp;quot; EOF sudo</description>
    </item>
    
    <item>
      <title>Java Writing Specification.md</title>
      <link>https://leiheng.github.io/posts/java/java-tips/</link>
      <pubDate>Thu, 01 Aug 2019 19:25:47 +0800</pubDate>
      
      <guid>https://leiheng.github.io/posts/java/java-tips/</guid>
      <description>到 resource 文件夹里面拿文件 String response = Resources.toString(Resources.getResource(&amp;quot;response.json&amp;quot;), Charsets.UTF_8); // bytes: Resources.asByteSource(Resources.getResource(&amp;quot;datain_100000.log&amp;quot;).toURI().toURL()).openBufferedStream(); // Guava: public static URL getResource(String resourceName) { ClassLoader loader = MoreObjects.firstNonNull( Thread.currentThread().getContextClassLoader(), Resources.class.getClassLoader()); URL url = loader.getResource(resourceName); checkArgument(url != null, &amp;quot;resource %s not found.&amp;quot;, resourceName); return url; } get env in SpringBoot // define properties in application.yaml like: project: service: name: smarta-installer feature: mgmt: job-setting: job-retry-time: ${JOB_RETRY_TIME:100} job-interval-time: ${JOB_INTERVAL_TIME:60} then, create</description>
    </item>
    
    <item>
      <title>Https for Harbor</title>
      <link>https://leiheng.github.io/posts/docker/https-for-harbor/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leiheng.github.io/posts/docker/https-for-harbor/</guid>
      <description>https Exercise install Harbor and configure https.
prepare  install docker by get-docker script. install compose by compose github install wiki install harbor by harbor wiki  lets getting CA  mkdir /data/harbor-cert &amp;amp; cd /data/harbor-cert generate CA key
openssl genrsa -out ca.key 4096  CA crt
openssl req -x509 -new -nodes -sha512 -days 3650 \ -subj &amp;quot;/CN=yourdomain.com&amp;quot; \ -key ca.key \ -out ca.crt   lets getting server certificate  server key</description>
    </item>
    
    <item>
      <title>Git Note</title>
      <link>https://leiheng.github.io/posts/misc/git-note/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leiheng.github.io/posts/misc/git-note/</guid>
      <description>Add git 创建并添加ssh key git config --global user.name &amp;quot;leiheng&amp;quot; git config --global user.email &amp;quot;heng.lei@XXX.com&amp;quot; ssh-keygen -t rsa -C &amp;quot;heng.lei@XXX.com&amp;quot; 但是如果要在电脑上添加自己的github accout，refer this ssh-add error refer this final: git clone git@git-personal:leiheng\repo final: git clone</description>
    </item>
    
  </channel>
</rss>